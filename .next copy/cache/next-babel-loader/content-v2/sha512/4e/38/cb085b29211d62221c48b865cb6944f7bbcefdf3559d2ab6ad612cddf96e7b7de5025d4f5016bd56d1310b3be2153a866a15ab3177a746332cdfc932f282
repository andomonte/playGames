{"ast":null,"code":"import aws from 'aws-sdk'; // import crypto from 'crypto';\n// import { promisify } from 'util';\n\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { parseUrl } from '@aws-sdk/url-parser';\nimport { Sha256 } from '@aws-crypto/sha256-browser';\nimport { Hash } from '@aws-sdk/hash-node';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport Iframe from 'react-iframe'; // const randomBytes = promisify(crypto.randomBytes);\n\nconst bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nconst credentials = {\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n};\nconst s3 = new aws.S3();\nconst s3ObjectUrl = parseUrl(`https://${bucket}.s3.${region}.amazonaws.com/${key}`);\nconst presigner = new S3RequestPresigner({\n  credentials,\n  region,\n  sha256: Hash.bind(null, 'sha256') // In Node.js\n  // sha256: Sha256 // In browsers\n\n});\nexport async function uploadVideosS3(fileName) {\n  // const rawBytes = await randomBytes(16);\n  // const imageName = rawBytes.toString('hex');\n  // console.log('valor do FileName:', fileName);\n  try {\n    const params = {\n      Bucket: bucketName,\n      Key: fileName\n    }; // const uploadURL = await s3.getObject(params).promise();\n\n    const uploadURL = await s3.getSignedUrlPromise('putObject', params);\n    const urls = uploadURL;\n    console.log(urls);\n    return urls; // return valorUrl;\n  } catch (e) {\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\n  }\n}\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","HttpRequest","S3RequestPresigner","parseUrl","Sha256","Hash","formatUrl","Iframe","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","credentials","s3","S3","s3ObjectUrl","bucket","key","presigner","sha256","bind","uploadVideosS3","fileName","params","Bucket","Key","uploadURL","getSignedUrlPromise","urls","console","log","e","Error","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AAEA,MAAMC,UAAU,GAAG,aAAnB;AAEAR,GAAG,CAACS,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAKA,MAAMC,WAAW,GAAG;AAClBR,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADX;AAElBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFP;AAGlBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHF,CAApB;AAMA,MAAME,EAAE,GAAG,IAAIpB,GAAG,CAACqB,EAAR,EAAX;AACA,MAAMC,WAAW,GAAGnB,QAAQ,CACzB,WAAUoB,MAAO,OAAMN,MAAO,kBAAiBO,GAAI,EAD1B,CAA5B;AAGA,MAAMC,SAAS,GAAG,IAAIvB,kBAAJ,CAAuB;AACvCiB,EAAAA,WADuC;AAEvCF,EAAAA,MAFuC;AAGvCS,EAAAA,MAAM,EAAErB,IAAI,CAACsB,IAAL,CAAU,IAAV,EAAgB,QAAhB,CAH+B,CAGJ;AACnC;;AAJuC,CAAvB,CAAlB;AAMA,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwC;AAC7C;AACA;AACA;AAEA,MAAI;AACF,UAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAEvB,UADK;AAEbwB,MAAAA,GAAG,EAAEH;AAFQ,KAAf,CADE,CAMF;;AACA,UAAMI,SAAS,GAAG,MAAMb,EAAE,CAACc,mBAAH,CAAuB,WAAvB,EAAoCJ,MAApC,CAAxB;AACA,UAAMK,IAAI,GAAGF,SAAb;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,WAAOA,IAAP,CAVE,CAWF;AACD,GAZD,CAYE,OAAOG,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CAAW,oCAAmCD,CAAC,CAACE,OAAQ,EAAxD,CAAN;AACD;AACF;AAED,eAAeZ,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n// import crypto from 'crypto';\r\n// import { promisify } from 'util';\r\n\r\nimport { HttpRequest } from '@aws-sdk/protocol-http';\r\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\r\nimport { parseUrl } from '@aws-sdk/url-parser';\r\nimport { Sha256 } from '@aws-crypto/sha256-browser';\r\nimport { Hash } from '@aws-sdk/hash-node';\r\nimport { formatUrl } from '@aws-sdk/util-format-url';\r\nimport Iframe from 'react-iframe';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\nconst credentials = {\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n};\r\n\r\nconst s3 = new aws.S3();\r\nconst s3ObjectUrl = parseUrl(\r\n  `https://${bucket}.s3.${region}.amazonaws.com/${key}`,\r\n);\r\nconst presigner = new S3RequestPresigner({\r\n  credentials,\r\n  region,\r\n  sha256: Hash.bind(null, 'sha256'), // In Node.js\r\n  // sha256: Sha256 // In browsers\r\n});\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n  // console.log('valor do FileName:', fileName);\r\n\r\n  try {\r\n    const params = {\r\n      Bucket: bucketName,\r\n      Key: fileName,\r\n    };\r\n\r\n    // const uploadURL = await s3.getObject(params).promise();\r\n    const uploadURL = await s3.getSignedUrlPromise('putObject', params);\r\n    const urls = uploadURL;\r\n    console.log(urls);\r\n    return urls;\r\n    // return valorUrl;\r\n  } catch (e) {\r\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}