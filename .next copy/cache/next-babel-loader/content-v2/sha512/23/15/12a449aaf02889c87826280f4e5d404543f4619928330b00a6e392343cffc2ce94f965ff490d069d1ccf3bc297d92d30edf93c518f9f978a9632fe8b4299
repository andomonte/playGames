{"ast":null,"code":"import _regeneratorRuntime from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport api from 'src/components/services/api';\nexport default function download() {\n  return _download.apply(this, arguments);\n}\n\nfunction _download() {\n  _download = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var enviarURL, pegarURL;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            enviarURL = /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(urlAws, file) {\n                var dataFile;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        dataFile = new FormData();\n                        dataFile.append('file', file[0].file, file[0].name);\n                        axios.put(urlAws.data, file[0].file, {\n                          headers: {\n                            'Content-Type': 'multipart/form-data'\n                          }\n                        }).then(function (result) {\n                          return result;\n                        })[\"catch\"](function (error) {\n                          console.log('ERROR ', error);\n                          return error;\n                        });\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function enviarURL(_x, _x2) {\n                return _ref.apply(this, arguments);\n              };\n            }();\n\n            pegarURL = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(uploadedFiles) {\n                var file;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        file = uploadedFiles; // get secure url from our server\n\n                        api.post('api/videos', {\n                          fileName: file[0].name,\n                          fileType: file[0].type\n                        }).then(function (response) {\n                          if (response) {\n                            // setTransfer(response.status);\n                            // setEditar(false);\n                            enviarURL(response, file);\n                          } //  updateFile(uploadedFile.id, { uploaded: true });\n\n                        })[\"catch\"](function () {//  updateFile(uploadedFile.id, { error: true });\n                        });\n\n                      case 2:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function pegarURL(_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _download.apply(this, arguments);\n}","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/download.js"],"names":["axios","api","download","enviarURL","urlAws","file","dataFile","FormData","append","name","put","data","headers","then","result","error","console","log","pegarURL","uploadedFiles","post","fileName","fileType","type","response"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,6BAAhB;AAEA,wBAA8BC,QAA9B;AAAA;AAAA;;;uEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,SADO;AAAA,kFACK,iBAAOC,MAAP,EAAeC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,wBAAAA,QADU,GACC,IAAIC,QAAJ,EADD;AAEhBD,wBAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBH,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAAhC,EAAsCA,IAAI,CAAC,CAAD,CAAJ,CAAQI,IAA9C;AAEAT,wBAAAA,KAAK,CACFU,GADH,CACON,MAAM,CAACO,IADd,EACoBN,IAAI,CAAC,CAAD,CAAJ,CAAQA,IAD5B,EACkC;AAC9BO,0BAAAA,OAAO,EAAE;AACP,4CAAgB;AADT;AADqB,yBADlC,EAMGC,IANH,CAMQ,UAACC,MAAD;AAAA,iCAAYA,MAAZ;AAAA,yBANR,WAOS,UAACC,KAAD,EAAW;AAChBC,0BAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,KAAtB;AACA,iCAAOA,KAAP;AACD,yBAVH;;AAJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADL;;AAAA,8BACPZ,SADO;AAAA;AAAA;AAAA;;AAiBPe,YAAAA,QAjBO;AAAA,mFAiBI,kBAAOC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACTd,wBAAAA,IADS,GACFc,aADE,EAGf;;AACAlB,wBAAAA,GAAG,CACAmB,IADH,CACQ,YADR,EACsB;AAClBC,0BAAAA,QAAQ,EAAEhB,IAAI,CAAC,CAAD,CAAJ,CAAQI,IADA;AAElBa,0BAAAA,QAAQ,EAAEjB,IAAI,CAAC,CAAD,CAAJ,CAAQkB;AAFA,yBADtB,EAKGV,IALH,CAKQ,UAACW,QAAD,EAAc;AAClB,8BAAIA,QAAJ,EAAc;AACZ;AACA;AACArB,4BAAAA,SAAS,CAACqB,QAAD,EAAWnB,IAAX,CAAT;AACD,2BALiB,CAMlB;;AACD,yBAZH,WAaS,YAAM,CACX;AACD,yBAfH;;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjBJ;;AAAA,8BAiBPa,QAjBO;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import axios from 'axios';\r\nimport api from 'src/components/services/api';\r\n\r\nexport default async function download() {\r\n  const enviarURL = async (urlAws, file) => {\r\n    const dataFile = new FormData();\r\n    dataFile.append('file', file[0].file, file[0].name);\r\n\r\n    axios\r\n      .put(urlAws.data, file[0].file, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then((result) => result)\r\n      .catch((error) => {\r\n        console.log('ERROR ', error);\r\n        return error;\r\n      });\r\n  };\r\n  const pegarURL = async (uploadedFiles) => {\r\n    const file = uploadedFiles;\r\n\r\n    // get secure url from our server\r\n    api\r\n      .post('api/videos', {\r\n        fileName: file[0].name,\r\n        fileType: file[0].type,\r\n      })\r\n      .then((response) => {\r\n        if (response) {\r\n          // setTransfer(response.status);\r\n          // setEditar(false);\r\n          enviarURL(response, file);\r\n        }\r\n        //  updateFile(uploadedFile.id, { uploaded: true });\r\n      })\r\n      .catch(() => {\r\n        //  updateFile(uploadedFile.id, { error: true });\r\n      });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}