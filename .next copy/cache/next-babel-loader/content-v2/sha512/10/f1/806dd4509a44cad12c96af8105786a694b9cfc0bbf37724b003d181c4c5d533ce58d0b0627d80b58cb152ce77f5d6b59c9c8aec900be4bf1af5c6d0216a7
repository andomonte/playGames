{"ast":null,"code":"import _regeneratorRuntime from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport aws from 'aws-sdk'; // import crypto from 'crypto';\n// import { promisify } from 'util';\n\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { parseUrl } from '@aws-sdk/url-parser';\nimport { Sha256 } from '@aws-crypto/sha256-browser';\nimport { Hash } from '@aws-sdk/hash-node';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport Iframe from 'react-iframe'; // const randomBytes = promisify(crypto.randomBytes);\n\nvar bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nvar credentials = {\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n};\nvar s3 = new aws.S3();\nvar presigner = new S3RequestPresigner({\n  credentials: credentials,\n  sha256: Hash.bind(null, 'sha256') // In Node.js\n  // sha256: Sha256 // In browsers\n\n});\nexport function uploadVideosS3(_x) {\n  return _uploadVideosS.apply(this, arguments);\n}\n\nfunction _uploadVideosS() {\n  _uploadVideosS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n    var params, s3ObjectUrl, url2, uploadURL, urls;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // const rawBytes = await randomBytes(16);\n            // const imageName = rawBytes.toString('hex');\n            // console.log('valor do FileName:', fileName);\n            params = {\n              Bucket: bucketName,\n              Key: fileName\n            };\n            s3ObjectUrl = parseUrl(\"https://\".concat(params.Bucket, \".s3.\").concat(credentials.region, \".amazonaws.com/\").concat(params.Key));\n            _context.prev = 2;\n            _context.next = 5;\n            return presigner.presign(new HttpRequest(s3ObjectUrl));\n\n          case 5:\n            url2 = _context.sent;\n            console.log('PRESIGNED URL: ', formatUrl(url2)); // const uploadURL = await s3.getObject(params).promise();\n\n            _context.next = 9;\n            return s3.getSignedUrlPromise('getObject', params);\n\n          case 9:\n            uploadURL = _context.sent;\n            // s3.getSignedUrlPromise('putObject', params);\n            urls = uploadURL;\n            console.log(urls);\n            return _context.abrupt(\"return\", urls);\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](2);\n            throw new Error(\"Could not retrieve file from S3: \".concat(_context.t0.message));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 15]]);\n  }));\n  return _uploadVideosS.apply(this, arguments);\n}\n\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","HttpRequest","S3RequestPresigner","parseUrl","Sha256","Hash","formatUrl","Iframe","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","credentials","s3","S3","presigner","sha256","bind","uploadVideosS3","fileName","params","Bucket","Key","s3ObjectUrl","presign","url2","console","log","getSignedUrlPromise","uploadURL","urls","Error","message"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,SAAhB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AAEA,IAAMC,UAAU,GAAG,aAAnB;AAEAR,GAAG,CAACS,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAKA,IAAMC,WAAW,GAAG;AAClBR,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADX;AAElBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFP;AAGlBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHF,CAApB;AAMA,IAAME,EAAE,GAAG,IAAIpB,GAAG,CAACqB,EAAR,EAAX;AAEA,IAAMC,SAAS,GAAG,IAAIpB,kBAAJ,CAAuB;AACvCiB,EAAAA,WAAW,EAAXA,WADuC;AAEvCI,EAAAA,MAAM,EAAElB,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgB,QAAhB,CAF+B,CAEJ;AACnC;;AAHuC,CAAvB,CAAlB;AAKA,gBAAsBC,cAAtB;AAAA;AAAA;;;4EAAO,iBAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AACMC,YAAAA,MAJD,GAIU;AACbC,cAAAA,MAAM,EAAEpB,UADK;AAEbqB,cAAAA,GAAG,EAAEH;AAFQ,aAJV;AAQCI,YAAAA,WARD,GAQe3B,QAAQ,mBACfwB,MAAM,CAACC,MADQ,iBACKT,WAAW,CAACF,MADjB,4BACyCU,MAAM,CAACE,GADhD,EARvB;AAAA;AAAA;AAAA,mBAYgBP,SAAS,CAACS,OAAV,CAAkB,IAAI9B,WAAJ,CAAgB6B,WAAhB,CAAlB,CAZhB;;AAAA;AAYGE,YAAAA,IAZH;AAaHC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B5B,SAAS,CAAC0B,IAAD,CAAxC,EAbG,CAcH;;AAdG;AAAA,mBAeqBZ,EAAE,CAACe,mBAAH,CAAuB,WAAvB,EAAoCR,MAApC,CAfrB;;AAAA;AAeGS,YAAAA,SAfH;AAekE;AAC/DC,YAAAA,IAhBH,GAgBUD,SAhBV;AAiBHH,YAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AAjBG,6CAkBIA,IAlBJ;;AAAA;AAAA;AAAA;AAAA,kBAqBG,IAAIC,KAAJ,4CAA8C,YAAEC,OAAhD,EArBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAyBP,eAAed,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n// import crypto from 'crypto';\r\n// import { promisify } from 'util';\r\n\r\nimport { HttpRequest } from '@aws-sdk/protocol-http';\r\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\r\nimport { parseUrl } from '@aws-sdk/url-parser';\r\nimport { Sha256 } from '@aws-crypto/sha256-browser';\r\nimport { Hash } from '@aws-sdk/hash-node';\r\nimport { formatUrl } from '@aws-sdk/util-format-url';\r\nimport Iframe from 'react-iframe';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\nconst credentials = {\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n};\r\n\r\nconst s3 = new aws.S3();\r\n\r\nconst presigner = new S3RequestPresigner({\r\n  credentials,\r\n  sha256: Hash.bind(null, 'sha256'), // In Node.js\r\n  // sha256: Sha256 // In browsers\r\n});\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n  // console.log('valor do FileName:', fileName);\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  const s3ObjectUrl = parseUrl(\r\n    `https://${params.Bucket}.s3.${credentials.region}.amazonaws.com/${params.Key}`,\r\n  );\r\n  try {\r\n    const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n    console.log('PRESIGNED URL: ', formatUrl(url2));\r\n    // const uploadURL = await s3.getObject(params).promise();\r\n    const uploadURL = await s3.getSignedUrlPromise('getObject', params); // s3.getSignedUrlPromise('putObject', params);\r\n    const urls = uploadURL;\r\n    console.log(urls);\r\n    return urls;\r\n    // return valorUrl;\r\n  } catch (e) {\r\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}