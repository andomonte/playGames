{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport useSWR from 'swr';\nimport fetch from 'unfetch'; // const data = getUsuarios();\n// Configure one or more authentication providers\n\nlet valorUsuario = 'inicio';\n\nfunction useres() {\n  const fetcher = url => fetch(url).then(r => r.json());\n\n  const {\n    data\n  } = useSWR('/api/getUser', fetcher);\n  valorUsuario = JSON.parse(JSON.stringify(data));\n  console.log(valorUsuario);\n  return data;\n}\n\nconsole.log(valorUsuario);\nconst usuarios = [{\n  email: 'andomonte@gmail.com',\n  nivel: 'master'\n}, {\n  email: 'andomonte2@gmail.com',\n  nivel: 'master'\n}];\nconst val = {\n  useres\n}; // const fetcher = (url) => fetch(url).then((r) => r.json());\n// const { data } => //useSWR('/api/getUser', fetcher);\n// console.log(data);\n\nconst options = {\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code'\n  }), Providers.Facebook({\n    clientId: process.env.FACEBOOK_CLIENT_ID,\n    clientSecret: process.env.FACEBOOK_CLIENT_SECRET\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\n      // if (!data) return <div>loading...</div>;\n      //   return <div>hello {data.name}!</div>;\n      const dados = JSON.parse(JSON.stringify(usuarios.filter(item => item.email === profile.email))); //   const verifiedEmail = dados[0].email;\n\n      console.log(profile.email, dados[0]);\n\n      if (account.provider === 'google' && profile.verified_email === true && dados[0] //  profile.email.endsWith(verifiedEmail)\n      ) {\n          return true;\n        }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","useSWR","fetch","valorUsuario","useres","fetcher","url","then","r","json","data","JSON","parse","stringify","console","log","usuarios","email","nivel","val","options","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","Facebook","FACEBOOK_CLIENT_ID","FACEBOOK_CLIENT_SECRET","callbacks","signIn","user","account","profile","dados","filter","item","provider","verified_email","session","jwt","secret","JWT_SECRET","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;;AACA,IAAIC,YAAY,GAAG,QAAnB;;AACA,SAASC,MAAT,GAAkB;AAChB,QAAMC,OAAO,GAAIC,GAAD,IAASJ,KAAK,CAACI,GAAD,CAAL,CAAWC,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAvB,CAAzB;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWT,MAAM,CAAC,cAAD,EAAiBI,OAAjB,CAAvB;AACAF,EAAAA,YAAY,GAAGQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,IAAf,CAAX,CAAf;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYZ,YAAZ;AACA,SAAOO,IAAP;AACD;;AACDI,OAAO,CAACC,GAAR,CAAYZ,YAAZ;AACA,MAAMa,QAAQ,GAAG,CACf;AACEC,EAAAA,KAAK,EAAE,qBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CADe,EAKf;AACED,EAAAA,KAAK,EAAE,sBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CALe,CAAjB;AAUA,MAAMC,GAAG,GAAG;AAAEf,EAAAA;AAAF,CAAZ,C,CAEA;AACA;AACA;;AACA,MAAMgB,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,CACT;AACArB,EAAAA,SAAS,CAACsB,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd;AAJa,GAAjB,CAFS,EAQT7B,SAAS,CAAC8B,QAAV,CAAmB;AACjBP,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYM,kBADL;AAEjBJ,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYO;AAFT,GAAnB,CARS,CADG;AAcdC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC;AAEA;AACA;AAEA,YAAMC,KAAK,GAAG3B,IAAI,CAACC,KAAL,CACZD,IAAI,CAACE,SAAL,CAAeG,QAAQ,CAACuB,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACvB,KAAL,KAAeoB,OAAO,CAACpB,KAAjD,CAAf,CADY,CAAd,CANmC,CASnC;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYsB,OAAO,CAACpB,KAApB,EAA2BqB,KAAK,CAAC,CAAD,CAAhC;;AACA,UACEF,OAAO,CAACK,QAAR,KAAqB,QAArB,IACAJ,OAAO,CAACK,cAAR,KAA2B,IAD3B,IAEAJ,KAAK,CAAC,CAAD,CAHP,CAGW;AAHX,QAIE;AACA,iBAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;AApBQ,GAdG;AAoCdK,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GApCK;AAuCdA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAErB,OAAO,CAACC,GAAR,CAAYqB;AADjB,GAvCS,CA0Cd;AACA;;AA3Cc,CAAhB;AA8CA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcjD,QAAQ,CAACgD,GAAD,EAAMC,GAAN,EAAW5B,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\nimport useSWR from 'swr';\r\nimport fetch from 'unfetch';\r\n\r\n// const data = getUsuarios();\r\n// Configure one or more authentication providers\r\nlet valorUsuario = 'inicio';\r\nfunction useres() {\r\n  const fetcher = (url) => fetch(url).then((r) => r.json());\r\n  const { data } = useSWR('/api/getUser', fetcher);\r\n  valorUsuario = JSON.parse(JSON.stringify(data));\r\n  console.log(valorUsuario);\r\n  return data;\r\n}\r\nconsole.log(valorUsuario);\r\nconst usuarios = [\r\n  {\r\n    email: 'andomonte@gmail.com',\r\n    nivel: 'master',\r\n  },\r\n  {\r\n    email: 'andomonte2@gmail.com',\r\n    nivel: 'master',\r\n  },\r\n];\r\nconst val = { useres };\r\n\r\n// const fetcher = (url) => fetch(url).then((r) => r.json());\r\n// const { data } => //useSWR('/api/getUser', fetcher);\r\n// console.log(data);\r\nconst options = {\r\n  providers: [\r\n    // ...add more providers here\r\n    Providers.Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorizationUrl:\r\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n    }),\r\n    Providers.Facebook({\r\n      clientId: process.env.FACEBOOK_CLIENT_ID,\r\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn(user, account, profile) {\r\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\r\n\r\n      // if (!data) return <div>loading...</div>;\r\n      //   return <div>hello {data.name}!</div>;\r\n\r\n      const dados = JSON.parse(\r\n        JSON.stringify(usuarios.filter((item) => item.email === profile.email)),\r\n      );\r\n      //   const verifiedEmail = dados[0].email;\r\n      console.log(profile.email, dados[0]);\r\n      if (\r\n        account.provider === 'google' &&\r\n        profile.verified_email === true &&\r\n        dados[0] //  profile.email.endsWith(verifiedEmail)\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  jwt: {\r\n    secret: process.env.JWT_SECRET,\r\n  },\r\n  // A database is optional, but required to persist accounts in a database\r\n  // database: process.env.DATABASE_URL,\r\n};\r\n\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}