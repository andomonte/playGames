{"ast":null,"code":"import _regeneratorRuntime from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport aws from 'aws-sdk'; // const randomBytes = promisify(crypto.randomBytes);\n\nvar bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nvar s3 = new aws.S3();\nexport function uploadVideosS3(_x) {\n  return _uploadVideosS.apply(this, arguments);\n}\n\nfunction _uploadVideosS() {\n  _uploadVideosS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n    var params, uploadURL, urls;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // const rawBytes = await randomBytes(16);\n            // const imageName = rawBytes.toString('hex');\n            // console.log('valor do FileName:', fileName);\n            params = {\n              Bucket: bucketName,\n              Key: fileName\n            };\n            _context.prev = 1;\n            _context.next = 4;\n            return s3.getSignedUrlPromise('getObject', params);\n\n          case 4:\n            uploadURL = _context.sent;\n            // s3.getSignedUrlPromise('putObject', params);\n            urls = uploadURL;\n            console.log(urls);\n            return _context.abrupt(\"return\", urls);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            throw new Error(\"Could not retrieve file from S3: \".concat(_context.t0.message));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n  return _uploadVideosS.apply(this, arguments);\n}\n\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","s3","S3","uploadVideosS3","fileName","params","Bucket","Key","getSignedUrlPromise","uploadURL","urls","console","log","Error","message"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,SAAhB,C,CAEA;;AAEA,IAAMC,UAAU,GAAG,aAAnB;AAEAD,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAMA,IAAMC,EAAE,GAAG,IAAIZ,GAAG,CAACa,EAAR,EAAX;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;4EAAO,iBAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AACA;AACMC,YAAAA,MAJD,GAIU;AACbC,cAAAA,MAAM,EAAEhB,UADK;AAEbiB,cAAAA,GAAG,EAAEH;AAFQ,aAJV;AAAA;AAAA;AAAA,mBAYqBH,EAAE,CAACO,mBAAH,CAAuB,WAAvB,EAAoCH,MAApC,CAZrB;;AAAA;AAYGI,YAAAA,SAZH;AAYkE;AAC/DC,YAAAA,IAbH,GAaUD,SAbV;AAcHE,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAdG,6CAeIA,IAfJ;;AAAA;AAAA;AAAA;AAAA,kBAkBG,IAAIG,KAAJ,4CAA8C,YAAEC,OAAhD,EAlBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBP,eAAeX,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst s3 = new aws.S3();\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n  // console.log('valor do FileName:', fileName);\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  try {\r\n    // const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n    // console.log('PRESIGNED URL: ', formatUrl(url2));\r\n    // const uploadURL = await s3.getObject(params).promise();\r\n    const uploadURL = await s3.getSignedUrlPromise('getObject', params); // s3.getSignedUrlPromise('putObject', params);\r\n    const urls = uploadURL;\r\n    console.log(urls);\r\n    return urls;\r\n    // return valorUrl;\r\n  } catch (e) {\r\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}