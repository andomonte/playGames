{"ast":null,"code":"import React from 'react';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport useSWR from 'swr';\nimport fetch from 'unfetch'; // const data = getUsuarios();\n// Configure one or more authentication providers\n\nfunction userValue() {\n  // const [data, setData] = React.useState(null);\n  // setData(data);\n  const fetcher = url => fetch(url).then(r => r.json());\n\n  const {\n    data\n  } = useSWR('/api/getUser', fetcher);\n  console.log(data);\n  return data;\n} // const valorUsuario = userValue();\n// console.log(valorUsuario);\n\n\nconst usuarios = [{\n  email: 'andomonte@gmail.com',\n  nivel: 'master'\n}, {\n  email: 'andomonte2@gmail.com',\n  nivel: 'master'\n}]; // const fetcher = (url) => fetch(url).then((r) => r.json());\n// const { data } => //useSWR('/api/getUser', fetcher);\n// console.log(data);\n\nexport default ((req, res) => NextAuth(req, res, {\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code'\n  }), Providers.Facebook({\n    clientId: process.env.FACEBOOK_CLIENT_ID,\n    clientSecret: process.env.FACEBOOK_CLIENT_SECRET\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\n      // if (!data) return <div>loading...</div>;\n      //   return <div>hello {data.name}!</div>;\n      const dados = JSON.parse(JSON.stringify(usuarios.filter(item => item.email === profile.email))); //   const verifiedEmail = dados[0].email;\n\n      console.log(profile.email, dados[0]);\n\n      if (account.provider === 'google' && profile.verified_email === true && dados[0] //  profile.email.endsWith(verifiedEmail)\n      ) {\n          return true;\n        }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n}));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["React","NextAuth","Providers","useSWR","fetch","userValue","fetcher","url","then","r","json","data","console","log","usuarios","email","nivel","req","res","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","Facebook","FACEBOOK_CLIENT_ID","FACEBOOK_CLIENT_SECRET","callbacks","signIn","user","account","profile","dados","JSON","parse","stringify","filter","item","provider","verified_email","session","jwt","secret","JWT_SECRET"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;;AACA,SAASC,SAAT,GAAqB;AACnB;AACA;AACA,QAAMC,OAAO,GAAIC,GAAD,IAASH,KAAK,CAACG,GAAD,CAAL,CAAWC,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAvB,CAAzB;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWR,MAAM,CAAC,cAAD,EAAiBG,OAAjB,CAAvB;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAOA,IAAP;AACD,C,CACD;AACA;;;AACA,MAAMG,QAAQ,GAAG,CACf;AACEC,EAAAA,KAAK,EAAE,qBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CADe,EAKf;AACED,EAAAA,KAAK,EAAE,sBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CALe,CAAjB,C,CAUA;AACA;AACA;;AACA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KACbjB,QAAQ,CAACgB,GAAD,EAAMC,GAAN,EAAW;AACjBC,EAAAA,SAAS,EAAE,CACT;AACAjB,EAAAA,SAAS,CAACkB,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd;AAJa,GAAjB,CAFS,EAQTzB,SAAS,CAAC0B,QAAV,CAAmB;AACjBP,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYM,kBADL;AAEjBJ,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYO;AAFT,GAAnB,CARS,CADM;AAcjBC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC;AAEA;AACA;AAEA,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CACZD,IAAI,CAACE,SAAL,CACEzB,QAAQ,CAAC0B,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAAC1B,KAAL,KAAeoB,OAAO,CAACpB,KAAjD,CADF,CADY,CAAd,CANmC,CAWnC;;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYsB,OAAO,CAACpB,KAApB,EAA2BqB,KAAK,CAAC,CAAD,CAAhC;;AACA,UACEF,OAAO,CAACQ,QAAR,KAAqB,QAArB,IACAP,OAAO,CAACQ,cAAR,KAA2B,IAD3B,IAEAP,KAAK,CAAC,CAAD,CAHP,CAGW;AAHX,QAIE;AACA,iBAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;AAtBQ,GAdM;AAsCjBQ,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GAtCQ;AAyCjBA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAExB,OAAO,CAACC,GAAR,CAAYwB;AADjB,GAzCY,CA4CjB;AACA;;AA7CiB,CAAX,CADV","sourcesContent":["import React from 'react';\r\nimport NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\nimport useSWR from 'swr';\r\nimport fetch from 'unfetch';\r\n\r\n// const data = getUsuarios();\r\n// Configure one or more authentication providers\r\nfunction userValue() {\r\n  // const [data, setData] = React.useState(null);\r\n  // setData(data);\r\n  const fetcher = (url) => fetch(url).then((r) => r.json());\r\n  const { data } = useSWR('/api/getUser', fetcher);\r\n  console.log(data);\r\n  return data;\r\n}\r\n// const valorUsuario = userValue();\r\n// console.log(valorUsuario);\r\nconst usuarios = [\r\n  {\r\n    email: 'andomonte@gmail.com',\r\n    nivel: 'master',\r\n  },\r\n  {\r\n    email: 'andomonte2@gmail.com',\r\n    nivel: 'master',\r\n  },\r\n];\r\n// const fetcher = (url) => fetch(url).then((r) => r.json());\r\n// const { data } => //useSWR('/api/getUser', fetcher);\r\n// console.log(data);\r\nexport default (req, res) =>\r\n  NextAuth(req, res, {\r\n    providers: [\r\n      // ...add more providers here\r\n      Providers.Google({\r\n        clientId: process.env.GOOGLE_CLIENT_ID,\r\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n        authorizationUrl:\r\n          'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n      }),\r\n      Providers.Facebook({\r\n        clientId: process.env.FACEBOOK_CLIENT_ID,\r\n        clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\r\n      }),\r\n    ],\r\n    callbacks: {\r\n      async signIn(user, account, profile) {\r\n        //      const dados = await prisma.Usuarios({ loginUsuario: user });\r\n\r\n        // if (!data) return <div>loading...</div>;\r\n        //   return <div>hello {data.name}!</div>;\r\n\r\n        const dados = JSON.parse(\r\n          JSON.stringify(\r\n            usuarios.filter((item) => item.email === profile.email),\r\n          ),\r\n        );\r\n        //   const verifiedEmail = dados[0].email;\r\n        console.log(profile.email, dados[0]);\r\n        if (\r\n          account.provider === 'google' &&\r\n          profile.verified_email === true &&\r\n          dados[0] //  profile.email.endsWith(verifiedEmail)\r\n        ) {\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n    },\r\n    session: {\r\n      jwt: true,\r\n    },\r\n    jwt: {\r\n      secret: process.env.JWT_SECRET,\r\n    },\r\n    // A database is optional, but required to persist accounts in a database\r\n    // database: process.env.DATABASE_URL,\r\n  });\r\n"]},"metadata":{},"sourceType":"module"}