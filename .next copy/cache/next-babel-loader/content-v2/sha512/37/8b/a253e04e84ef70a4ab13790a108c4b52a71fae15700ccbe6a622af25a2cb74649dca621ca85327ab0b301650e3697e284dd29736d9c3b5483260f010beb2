{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // import useSWR from 'swr';\n// import fetch from 'unfetch';\n// const data = getUsuarios();\n// Configure one or more authentication providers\n\nconst valorUsuario = 'inicio';\n/* function Useres() {\r\n  const fetcher = (url) => fetch(url).then((r) => r.json());\r\n  const { data } = useSWR('/api/getUser', fetcher);\r\n  valorUsuario = 'JSON.parse(JSON.stringify(data))';\r\n  console.log(valorUsuario);\r\n  return data;\r\n} */\n\nconsole.log(valorUsuario);\nconst usuarios = [{\n  email: 'andomonte@gmail.com',\n  nivel: 'master'\n}, {\n  email: 'andomonte2@gmail.com',\n  nivel: 'aracaju'\n}, {\n  email: 'leamoura75@gmail.com',\n  nivel: 'Castelo'\n}]; // const fetcher = (url) => fetch(url).then((r) => r.json());\n// const { data } => //useSWR('/api/getUser', fetcher);\n// console.log(data);\n\nconst options = {\n  pages: {\n    //  signIn: '/auth/signin',\n    //  signOut: '/auth/signout',\n    //   error: '/auth/error', // Error code passed in query string as ?error=\n    //   verifyRequest: '/auth/verify-request', // (used for check email message)\n    newUser: '/auth/userPerfil' // If set, new users will be directed here on first sign in\n\n  },\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code' // callbackUrl: `${window.location.origin}/pefil`, // $ { id }\n\n  }), Providers.Facebook({\n    clientId: process.env.FACEBOOK_CLIENT_ID,\n    clientSecret: process.env.FACEBOOK_CLIENT_SECRET\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\n      // if (!data) return <div>loading...</div>;\n      //   return <div>hello {data.name}!</div>;\n      const dados = JSON.parse(JSON.stringify(usuarios.filter(item => item.email === profile.email))); //   const verifiedEmail = dados[0].email;\n\n      console.log(profile.email, dados[0], valorUsuario);\n\n      if (account.provider === 'google' && profile.verified_email === true && dados[0] //  profile.email.endsWith(verifiedEmail)\n      ) {\n          return true;\n        }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":null,"metadata":{},"sourceType":"module"}