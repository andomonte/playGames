{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // Configure one or more authentication providers\n\nconst options = {\n  providers: [// ...add more providers here\n\n  /*     Providers.Google({\r\n    clientId: process.env.GOOGLE_CLIENT_ID,\r\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n    authorizationUrl:\r\n      'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n  }),\r\n  */\n  Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credenciais',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: 'Nome do Usuario',\n        type: 'text',\n        placeholder: 'usuario'\n      },\n      password: {\n        label: 'Senha',\n        type: 'password',\n        placehlder: 'senha'\n      }\n    },\n\n    async authorize(credentials) {\n      // console.log(credentials);\n      // Add logic here to look up the user from the credentials supplied\n      const user = {\n        id: 1,\n        name: 'J Smith',\n        email: 'jsmith@example.com'\n      };\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return user;\n      } // If you return null or false then the credentials will be rejected\n\n\n      return null; // You can also Reject this callback with an Error or with a URL:\n      // throw new Error('error message') // Redirect to error page\n      // throw '/path/to/redirect'        // Redirect to a URL\n    }\n\n  })],\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","options","providers","Credentials","name","credentials","username","label","type","placeholder","password","placehlder","authorize","user","id","email","session","jwt","secret","process","env","JWT_SECRET","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CAEA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,CACT;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AAAIF,EAAAA,SAAS,CAACG,WAAV,CACE;AACE;AACAC,IAAAA,IAAI,EAAE,aAFR;AAGE;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,KAAK,EAAE,iBADC;AAERC,QAAAA,IAAI,EAAE,MAFE;AAGRC,QAAAA,WAAW,EAAE;AAHL,OADC;AAMXC,MAAAA,QAAQ,EAAE;AACRH,QAAAA,KAAK,EAAE,OADC;AAERC,QAAAA,IAAI,EAAE,UAFE;AAGRG,QAAAA,UAAU,EAAE;AAHJ;AANC,KANf;;AAkBE,UAAMC,SAAN,CAAgBP,WAAhB,EAA6B;AAC3B;AACA;AACA,YAAMQ,IAAI,GAAG;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASV,QAAAA,IAAI,EAAE,SAAf;AAA0BW,QAAAA,KAAK,EAAE;AAAjC,OAAb;;AAEA,UAAIF,IAAJ,EAAU;AACR;AACA,eAAOA,IAAP;AACD,OAR0B,CAS3B;;;AACA,aAAO,IAAP,CAV2B,CAW3B;AACA;AACA;AACD;;AAhCH,GADF,CARS,CADG;AA+CdG,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GA/CK;AAkDdA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADjB,GAlDS,CAqDd;AACA;;AAtDc,CAAhB;AAwDA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcxB,QAAQ,CAACuB,GAAD,EAAMC,GAAN,EAAWtB,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\n\r\n// Configure one or more authentication providers\r\nconst options = {\r\n  providers: [\r\n    // ...add more providers here\r\n    /*     Providers.Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorizationUrl:\r\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n    }),\r\n */ Providers.Credentials(\r\n      {\r\n        // The name to display on the sign in form (e.g. 'Sign in with...')\r\n        name: 'Credenciais',\r\n        // The credentials is used to generate a suitable form on the sign in page.\r\n        // You can specify whatever fields you are expecting to be submitted.\r\n        // e.g. domain, username, password, 2FA token, etc.\r\n        credentials: {\r\n          username: {\r\n            label: 'Nome do Usuario',\r\n            type: 'text',\r\n            placeholder: 'usuario',\r\n          },\r\n          password: {\r\n            label: 'Senha',\r\n            type: 'password',\r\n            placehlder: 'senha',\r\n          },\r\n        },\r\n        async authorize(credentials) {\r\n          // console.log(credentials);\r\n          // Add logic here to look up the user from the credentials supplied\r\n          const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' };\r\n\r\n          if (user) {\r\n            // Any object returned will be saved in `user` property of the JWT\r\n            return user;\r\n          }\r\n          // If you return null or false then the credentials will be rejected\r\n          return null;\r\n          // You can also Reject this callback with an Error or with a URL:\r\n          // throw new Error('error message') // Redirect to error page\r\n          // throw '/path/to/redirect'        // Redirect to a URL\r\n        },\r\n      },\r\n    ),\r\n  ],\r\n\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  jwt: {\r\n    secret: process.env.JWT_SECRET,\r\n  },\r\n  // A database is optional, but required to persist accounts in a database\r\n  // database: process.env.DATABASE_URL,\r\n};\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}