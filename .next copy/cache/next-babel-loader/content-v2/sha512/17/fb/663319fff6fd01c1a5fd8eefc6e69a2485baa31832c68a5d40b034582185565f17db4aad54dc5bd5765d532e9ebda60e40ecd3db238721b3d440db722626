{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // Configure one or more authentication providers\n\nconst options = {\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code'\n  }), Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: 'Username',\n        type: 'text',\n        placeholder: 'jsmith'\n      },\n      password: {\n        label: 'Password',\n        type: 'password'\n      }\n    },\n\n    async authorize(credentials) {\n      // Add logic here to look up the user from the credentials supplied\n      console.log(credentials);\n      const user = {\n        id: 1,\n        name: 'J Smith',\n        email: 'jsmith@example.com'\n      };\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return user;\n      } // If you return null or false then the credentials will be rejected\n\n\n      return null; // You can also Reject this callback with an Error or with a URL:\n      // throw new Error('error message') // Redirect to error page\n      // throw '/path/to/redirect'        // Redirect to a URL\n    }\n\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      console.log(`user=${user.name}, account=${account.provider}, profile=${profile.email}`);\n\n      if (account.provider === 'google' && profile.verified_email === true && profile.email.endsWith('andomonte@gmail.com')) {\n        return true;\n      }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","options","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","Credentials","name","credentials","username","label","type","placeholder","password","authorize","console","log","user","id","email","callbacks","signIn","account","profile","provider","verified_email","endsWith","session","jwt","secret","JWT_SECRET","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CAEA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,CACT;AACAF,EAAAA,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd;AAJa,GAAjB,CAFS,EAQTV,SAAS,CAACW,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpB;AACA;AACA;AACAC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADC;AAEXC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAFC,KANO;;AAUpB,UAAMG,SAAN,CAAgBN,WAAhB,EAA6B;AAC3B;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ;AACA,YAAMS,IAAI,GAAG;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASX,QAAAA,IAAI,EAAE,SAAf;AAA0BY,QAAAA,KAAK,EAAE;AAAjC,OAAb;;AAEA,UAAIF,IAAJ,EAAU;AACR;AACA,eAAOA,IAAP;AACD,OAR0B,CAS3B;;;AACA,aAAO,IAAP,CAV2B,CAW3B;AACA;AACA;AACD;;AAxBmB,GAAtB,CARS,CADG;AAoCdG,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaJ,IAAb,EAAmBK,OAAnB,EAA4BC,OAA5B,EAAqC;AACnCR,MAAAA,OAAO,CAACC,GAAR,CACG,QAAOC,IAAI,CAACV,IAAK,aAAYe,OAAO,CAACE,QAAS,aAAYD,OAAO,CAACJ,KAAM,EAD3E;;AAGA,UACEG,OAAO,CAACE,QAAR,KAAqB,QAArB,IACAD,OAAO,CAACE,cAAR,KAA2B,IAD3B,IAEAF,OAAO,CAACJ,KAAR,CAAcO,QAAd,CAAuB,qBAAvB,CAHF,EAIE;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;AAbQ,GApCG;AAmDdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GAnDK;AAsDdA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAE7B,OAAO,CAACC,GAAR,CAAY6B;AADjB,GAtDS,CAyDd;AACA;;AA1Dc,CAAhB;AA4DA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAActC,QAAQ,CAACqC,GAAD,EAAMC,GAAN,EAAWpC,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\n\r\n// Configure one or more authentication providers\r\nconst options = {\r\n  providers: [\r\n    // ...add more providers here\r\n    Providers.Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorizationUrl:\r\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n    }),\r\n    Providers.Credentials({\r\n      // The name to display on the sign in form (e.g. 'Sign in with...')\r\n      name: 'Credentials',\r\n      // The credentials is used to generate a suitable form on the sign in page.\r\n      // You can specify whatever fields you are expecting to be submitted.\r\n      // e.g. domain, username, password, 2FA token, etc.\r\n      credentials: {\r\n        username: { label: 'Username', type: 'text', placeholder: 'jsmith' },\r\n        password: { label: 'Password', type: 'password' },\r\n      },\r\n      async authorize(credentials) {\r\n        // Add logic here to look up the user from the credentials supplied\r\n        console.log(credentials);\r\n        const user = { id: 1, name: 'J Smith', email: 'jsmith@example.com' };\r\n\r\n        if (user) {\r\n          // Any object returned will be saved in `user` property of the JWT\r\n          return user;\r\n        }\r\n        // If you return null or false then the credentials will be rejected\r\n        return null;\r\n        // You can also Reject this callback with an Error or with a URL:\r\n        // throw new Error('error message') // Redirect to error page\r\n        // throw '/path/to/redirect'        // Redirect to a URL\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn(user, account, profile) {\r\n      console.log(\r\n        `user=${user.name}, account=${account.provider}, profile=${profile.email}`,\r\n      );\r\n      if (\r\n        account.provider === 'google' &&\r\n        profile.verified_email === true &&\r\n        profile.email.endsWith('andomonte@gmail.com')\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  jwt: {\r\n    secret: process.env.JWT_SECRET,\r\n  },\r\n  // A database is optional, but required to persist accounts in a database\r\n  // database: process.env.DATABASE_URL,\r\n};\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}