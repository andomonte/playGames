{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // import useSWR from 'swr';\n// import fetch from 'unfetch';\n// const data = getUsuarios();\n// Configure one or more authentication providers\n\nconst valorUsuario = 'inicio';\n/* function Useres() {\r\n  const fetcher = (url) => fetch(url).then((r) => r.json());\r\n  const { data } = useSWR('/api/getUser', fetcher);\r\n  valorUsuario = 'JSON.parse(JSON.stringify(data))';\r\n  console.log(valorUsuario);\r\n  return data;\r\n} */\n\nconsole.log(valorUsuario);\nconst usuarios = [{\n  email: 'andomonte@gmail.com',\n  nivel: 'master'\n}, {\n  email: 'andomonte2@gmail.com',\n  nivel: 'aracaju'\n}]; // const fetcher = (url) => fetch(url).then((r) => r.json());\n// const { data } => //useSWR('/api/getUser', fetcher);\n// console.log(data);\n\nconst options = {\n  pages: {\n    //  signIn: '/auth/signin',\n    //  signOut: '/auth/signout',\n    //   error: '/auth/error', // Error code passed in query string as ?error=\n    //   verifyRequest: '/auth/verify-request', // (used for check email message)\n    newUser: '/auth/perfil' // If set, new users will be directed here on first sign in\n\n  },\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code' // callbackUrl: `${window.location.origin}/pefil`, // $ { id }\n\n  }), Providers.Facebook({\n    clientId: process.env.FACEBOOK_CLIENT_ID,\n    clientSecret: process.env.FACEBOOK_CLIENT_SECRET\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\n      // if (!data) return <div>loading...</div>;\n      //   return <div>hello {data.name}!</div>;\n      const dados = JSON.parse(JSON.stringify(usuarios.filter(item => item.email === profile.email))); //   const verifiedEmail = dados[0].email;\n\n      console.log(profile.email, dados[0], valorUsuario);\n\n      if (account.provider === 'google' && profile.verified_email === true && dados[0] //  profile.email.endsWith(verifiedEmail)\n      ) {\n          return true;\n        }\n\n      return false;\n    },\n\n    async redirect(url, baseUrl) {\n      url = 'locallhost:3000/perfil';\n      return url.startsWith(baseUrl) ? url : baseUrl;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","valorUsuario","console","log","usuarios","email","nivel","options","pages","newUser","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","Facebook","FACEBOOK_CLIENT_ID","FACEBOOK_CLIENT_SECRET","callbacks","signIn","user","account","profile","dados","JSON","parse","stringify","filter","item","provider","verified_email","redirect","url","baseUrl","startsWith","session","jwt","secret","JWT_SECRET","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB,C,CACA;AACA;AAEA;AACA;;AACA,MAAMC,YAAY,GAAG,QAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,MAAMG,QAAQ,GAAG,CACf;AACEC,EAAAA,KAAK,EAAE,qBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CADe,EAKf;AACED,EAAAA,KAAK,EAAE,sBADT;AAEEC,EAAAA,KAAK,EAAE;AAFT,CALe,CAAjB,C,CAWA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE;AACL;AACA;AACA;AACA;AACAC,IAAAA,OAAO,EAAE,cALJ,CAKoB;;AALpB,GADO;AAQdC,EAAAA,SAAS,EAAE,CACT;AACAV,EAAAA,SAAS,CAACW,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd,oGAJa,CAKf;;AALe,GAAjB,CAFS,EASTlB,SAAS,CAACmB,QAAV,CAAmB;AACjBP,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYM,kBADL;AAEjBJ,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYO;AAFT,GAAnB,CATS,CARG;AAsBdC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC;AAEA;AACA;AAEA,YAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CACZD,IAAI,CAACE,SAAL,CAAe1B,QAAQ,CAAC2B,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAAC3B,KAAL,KAAeqB,OAAO,CAACrB,KAAjD,CAAf,CADY,CAAd,CANmC,CASnC;;AAEAH,MAAAA,OAAO,CAACC,GAAR,CAAYuB,OAAO,CAACrB,KAApB,EAA2BsB,KAAK,CAAC,CAAD,CAAhC,EAAqC1B,YAArC;;AACA,UACEwB,OAAO,CAACQ,QAAR,KAAqB,QAArB,IACAP,OAAO,CAACQ,cAAR,KAA2B,IAD3B,IAEAP,KAAK,CAAC,CAAD,CAHP,CAGW;AAHX,QAIE;AACA,iBAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KArBQ;;AAuBT,UAAMQ,QAAN,CAAeC,GAAf,EAAoBC,OAApB,EAA6B;AAC3BD,MAAAA,GAAG,GAAG,wBAAN;AACA,aAAOA,GAAG,CAACE,UAAJ,CAAeD,OAAf,IAA0BD,GAA1B,GAAgCC,OAAvC;AACD;;AA1BQ,GAtBG;AAkDdE,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GAlDK;AAqDdA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAE5B,OAAO,CAACC,GAAR,CAAY4B;AADjB,GArDS,CAwDd;AACA;;AAzDc,CAAhB;AA4DA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc7C,QAAQ,CAAC4C,GAAD,EAAMC,GAAN,EAAWrC,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\n// import useSWR from 'swr';\r\n// import fetch from 'unfetch';\r\n\r\n// const data = getUsuarios();\r\n// Configure one or more authentication providers\r\nconst valorUsuario = 'inicio';\r\n/* function Useres() {\r\n  const fetcher = (url) => fetch(url).then((r) => r.json());\r\n  const { data } = useSWR('/api/getUser', fetcher);\r\n  valorUsuario = 'JSON.parse(JSON.stringify(data))';\r\n  console.log(valorUsuario);\r\n  return data;\r\n} */\r\nconsole.log(valorUsuario);\r\nconst usuarios = [\r\n  {\r\n    email: 'andomonte@gmail.com',\r\n    nivel: 'master',\r\n  },\r\n  {\r\n    email: 'andomonte2@gmail.com',\r\n    nivel: 'aracaju',\r\n  },\r\n];\r\n\r\n// const fetcher = (url) => fetch(url).then((r) => r.json());\r\n// const { data } => //useSWR('/api/getUser', fetcher);\r\n// console.log(data);\r\nconst options = {\r\n  pages: {\r\n    //  signIn: '/auth/signin',\r\n    //  signOut: '/auth/signout',\r\n    //   error: '/auth/error', // Error code passed in query string as ?error=\r\n    //   verifyRequest: '/auth/verify-request', // (used for check email message)\r\n    newUser: '/auth/perfil', // If set, new users will be directed here on first sign in\r\n  },\r\n  providers: [\r\n    // ...add more providers here\r\n    Providers.Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorizationUrl:\r\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n      // callbackUrl: `${window.location.origin}/pefil`, // $ { id }\r\n    }),\r\n    Providers.Facebook({\r\n      clientId: process.env.FACEBOOK_CLIENT_ID,\r\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn(user, account, profile) {\r\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\r\n\r\n      // if (!data) return <div>loading...</div>;\r\n      //   return <div>hello {data.name}!</div>;\r\n\r\n      const dados = JSON.parse(\r\n        JSON.stringify(usuarios.filter((item) => item.email === profile.email)),\r\n      );\r\n      //   const verifiedEmail = dados[0].email;\r\n\r\n      console.log(profile.email, dados[0], valorUsuario);\r\n      if (\r\n        account.provider === 'google' &&\r\n        profile.verified_email === true &&\r\n        dados[0] //  profile.email.endsWith(verifiedEmail)\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n\r\n    async redirect(url, baseUrl) {\r\n      url = 'locallhost:3000/perfil';\r\n      return url.startsWith(baseUrl) ? url : baseUrl;\r\n    },\r\n  },\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  jwt: {\r\n    secret: process.env.JWT_SECRET,\r\n  },\r\n  // A database is optional, but required to persist accounts in a database\r\n  // database: process.env.DATABASE_URL,\r\n};\r\n\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}