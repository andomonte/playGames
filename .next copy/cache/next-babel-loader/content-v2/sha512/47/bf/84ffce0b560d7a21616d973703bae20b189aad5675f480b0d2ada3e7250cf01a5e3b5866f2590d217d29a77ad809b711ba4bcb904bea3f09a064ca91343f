{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"E:/src/next/sistemas/idpb-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"E:\\\\src\\\\next\\\\sistemas\\\\idpb-app\\\\src\\\\components\\\\Layout\\\\googleMap.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nvar containerStyle = {\n  width: '400px',\n  height: '400px'\n};\nvar center = {\n  lat: -3.745,\n  lng: -38.523\n};\n\nfunction MyComponent() {\n  _s();\n\n  var _useJsApiLoader = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: 'YOUR_API_KEY'\n  }),\n      isLoaded = _useJsApiLoader.isLoaded;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      map = _React$useState2[0],\n      setMap = _React$useState2[1];\n\n  var onLoad = React.useCallback(function (map) {\n    var bounds = new window.google.maps.LatLngBounds();\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  var onUnmount = React.useCallback(function (map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/_jsxDEV(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(MyComponent, \"sc/DS85Udqb0HC94DVNruSImuio=\", false, function () {\n  return [useJsApiLoader];\n});\n\n_c = MyComponent;\nexport default _c2 = /*#__PURE__*/React.memo(MyComponent);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/components/Layout/googleMap.js"],"names":["React","GoogleMap","useJsApiLoader","containerStyle","width","height","center","lat","lng","MyComponent","id","googleMapsApiKey","isLoaded","useState","map","setMap","onLoad","useCallback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount","memo"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,OADc;AAErBC,EAAAA,MAAM,EAAE;AAFa,CAAvB;AAKA,IAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,CAAC,KADO;AAEbC,EAAAA,GAAG,EAAE,CAAC;AAFO,CAAf;;AAKA,SAASC,WAAT,GAAuB;AAAA;;AAAA,wBACAP,cAAc,CAAC;AAClCQ,IAAAA,EAAE,EAAE,mBAD8B;AAElCC,IAAAA,gBAAgB,EAAE;AAFgB,GAAD,CADd;AAAA,MACbC,QADa,mBACbA,QADa;;AAAA,wBAMCZ,KAAK,CAACa,QAAN,CAAe,IAAf,CAND;AAAA;AAAA,MAMdC,GANc;AAAA,MAMTC,MANS;;AAQrB,MAAMC,MAAM,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,UAACH,GAAD,EAAS;AACxC,QAAMI,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,EAAf;AACAR,IAAAA,GAAG,CAACS,SAAJ,CAAcL,MAAd;AACAH,IAAAA,MAAM,CAACD,GAAD,CAAN;AACD,GAJc,EAIZ,EAJY,CAAf;AAMA,MAAMU,SAAS,GAAGxB,KAAK,CAACiB,WAAN,CAAkB,UAACH,GAAD,EAAS;AAC3CC,IAAAA,MAAM,CAAC,IAAD,CAAN;AACD,GAFiB,EAEf,EAFe,CAAlB;AAIA,SAAOH,QAAQ,gBACb,QAAC,SAAD;AACE,IAAA,iBAAiB,EAAET,cADrB;AAEE,IAAA,MAAM,EAAEG,MAFV;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,MAAM,EAAEU,MAJV;AAKE,IAAA,SAAS,EAAEQ,SALb;AAAA,2BAQE;AARF;AAAA;AAAA;AAAA;AAAA,UADa,gBAYb,qCAZF;AAcD;;GAhCQf,W;UACcP,c;;;KADdO,W;AAkCT,kCAAeT,KAAK,CAACyB,IAAN,CAAWhB,WAAX,CAAf","sourcesContent":["import React from 'react';\r\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '400px',\r\n  height: '400px',\r\n};\r\n\r\nconst center = {\r\n  lat: -3.745,\r\n  lng: -38.523,\r\n};\r\n\r\nfunction MyComponent() {\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: 'YOUR_API_KEY',\r\n  });\r\n\r\n  const [map, setMap] = React.useState(null);\r\n\r\n  const onLoad = React.useCallback((map) => {\r\n    const bounds = new window.google.maps.LatLngBounds();\r\n    map.fitBounds(bounds);\r\n    setMap(map);\r\n  }, []);\r\n\r\n  const onUnmount = React.useCallback((map) => {\r\n    setMap(null);\r\n  }, []);\r\n\r\n  return isLoaded ? (\r\n    <GoogleMap\r\n      mapContainerStyle={containerStyle}\r\n      center={center}\r\n      zoom={10}\r\n      onLoad={onLoad}\r\n      onUnmount={onUnmount}\r\n    >\r\n      {/* Child components, such as markers, info windows, etc. */}\r\n      <></>\r\n    </GoogleMap>\r\n  ) : (\r\n    <></>\r\n  );\r\n}\r\n\r\nexport default React.memo(MyComponent);\r\n"]},"metadata":{},"sourceType":"module"}