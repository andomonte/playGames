{"ast":null,"code":"import aws from 'aws-sdk';\nimport path from 'path';\n\nconst fs = require('fs');\n\nconst util = require('util');\n\nconst writeFile = util.promisify(fs.writeFile);\n\nconst downloadImgS3 = () => {\n  const region = process.env.AWSREGION;\n  const bucketName = 'sistemaidpb';\n  const accessKeyId = process.env.AWSACCESS_KEY;\n  const secretAccessKey = process.env.AWSSECRET_KEY;\n  const s3 = new aws.S3({\n    region,\n    accessKeyId,\n    secretAccessKey,\n    signatureVersion: 'v4'\n  });\n\n  const handleDownload = async fileName => {\n    console.log(fileName);\n    const dirPath = path.join(__dirname, '../public/images/temp');\n    const params = {\n      Bucket: bucketName,\n      Key: 'ARACAJU.png'\n    };\n    s3.getObject(params).promise().then(data => {\n      writeFile(dirPath, data.Body);\n      console.log('file downloaded successfully');\n    }).catch(err => {\n      throw err;\n    });\n    /*     s3.getObject(params, (err, data) => {\r\n      if (err) {\r\n        console.log(err, err.stack);\r\n        return err;\r\n      }\r\n      console.log('csvBlob:', data.Body);\r\n      //  const blob = new Blob([image], {type: 'image/png'})\r\n      // const img = URL.createObjectURL(blob);\r\n      return data.Body;\r\n    });\r\n    */\n  };\n\n  handleDownload();\n};\n\nexport default downloadImgS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/downloadImgS3.js"],"names":["aws","path","fs","require","util","writeFile","promisify","downloadImgS3","region","process","env","AWSREGION","bucketName","accessKeyId","AWSACCESS_KEY","secretAccessKey","AWSSECRET_KEY","s3","S3","signatureVersion","handleDownload","fileName","console","log","dirPath","join","__dirname","params","Bucket","Key","getObject","promise","then","data","Body","catch","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,SAAS,GAAGD,IAAI,CAACE,SAAL,CAAeJ,EAAE,CAACG,SAAlB,CAAlB;;AACA,MAAME,aAAa,GAAG,MAAM;AAC1B,QAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA3B;AACA,QAAMC,UAAU,GAAG,aAAnB;AACA,QAAMC,WAAW,GAAGJ,OAAO,CAACC,GAAR,CAAYI,aAAhC;AACA,QAAMC,eAAe,GAAGN,OAAO,CAACC,GAAR,CAAYM,aAApC;AACA,QAAMC,EAAE,GAAG,IAAIjB,GAAG,CAACkB,EAAR,CAAW;AACpBV,IAAAA,MADoB;AAEpBK,IAAAA,WAFoB;AAGpBE,IAAAA,eAHoB;AAIpBI,IAAAA,gBAAgB,EAAE;AAJE,GAAX,CAAX;;AAOA,QAAMC,cAAc,GAAG,MAAOC,QAAP,IAAoB;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMG,OAAO,GAAGvB,IAAI,CAACwB,IAAL,CAAUC,SAAV,EAAqB,uBAArB,CAAhB;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAEhB,UADK;AAEbiB,MAAAA,GAAG,EAAE;AAFQ,KAAf;AAIAZ,IAAAA,EAAE,CAACa,SAAH,CAAaH,MAAb,EACGI,OADH,GAEGC,IAFH,CAESC,IAAD,IAAU;AACd5B,MAAAA,SAAS,CAACmB,OAAD,EAAUS,IAAI,CAACC,IAAf,CAAT;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,KALH,EAMGY,KANH,CAMUC,GAAD,IAAS;AACd,YAAMA,GAAN;AACD,KARH;AASA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GA3BD;;AA6BAhB,EAAAA,cAAc;AACf,CA1CD;;AA4CA,eAAeb,aAAf","sourcesContent":["import aws from 'aws-sdk';\r\nimport path from 'path';\r\n\r\nconst fs = require('fs');\r\nconst util = require('util');\r\n\r\nconst writeFile = util.promisify(fs.writeFile);\r\nconst downloadImgS3 = () => {\r\n  const region = process.env.AWSREGION;\r\n  const bucketName = 'sistemaidpb';\r\n  const accessKeyId = process.env.AWSACCESS_KEY;\r\n  const secretAccessKey = process.env.AWSSECRET_KEY;\r\n  const s3 = new aws.S3({\r\n    region,\r\n    accessKeyId,\r\n    secretAccessKey,\r\n    signatureVersion: 'v4',\r\n  });\r\n\r\n  const handleDownload = async (fileName) => {\r\n    console.log(fileName);\r\n    const dirPath = path.join(__dirname, '../public/images/temp');\r\n    const params = {\r\n      Bucket: bucketName,\r\n      Key: 'ARACAJU.png',\r\n    };\r\n    s3.getObject(params)\r\n      .promise()\r\n      .then((data) => {\r\n        writeFile(dirPath, data.Body);\r\n        console.log('file downloaded successfully');\r\n      })\r\n      .catch((err) => {\r\n        throw err;\r\n      });\r\n    /*     s3.getObject(params, (err, data) => {\r\n      if (err) {\r\n        console.log(err, err.stack);\r\n        return err;\r\n      }\r\n      console.log('csvBlob:', data.Body);\r\n      //  const blob = new Blob([image], {type: 'image/png'})\r\n      // const img = URL.createObjectURL(blob);\r\n      return data.Body;\r\n    });\r\n */\r\n  };\r\n\r\n  handleDownload();\r\n};\r\n\r\nexport default downloadImgS3;\r\n"]},"metadata":{},"sourceType":"module"}