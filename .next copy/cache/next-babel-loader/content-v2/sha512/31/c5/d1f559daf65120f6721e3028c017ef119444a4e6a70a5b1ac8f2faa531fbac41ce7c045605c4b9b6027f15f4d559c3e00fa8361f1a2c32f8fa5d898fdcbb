{"ast":null,"code":"import _regeneratorRuntime from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport aws from 'aws-sdk'; // import crypto from 'crypto';\n// import { promisify } from 'util';\n\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { parseUrl } from '@aws-sdk/url-parser';\nimport { Sha256 } from '@aws-crypto/sha256-browser';\nimport { Hash } from '@aws-sdk/hash-node';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport Iframe from 'react-iframe'; // const randomBytes = promisify(crypto.randomBytes);\n\nvar region = process.env.AWSREGION;\nvar bucketName = 'sistemaidpb';\nvar accessKeyId = process.env.AWSACCESS_KEY;\nvar secretAccessKey = process.env.AWSSECRET_KEY;\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nvar credentials = {\n  accessKeyId: accessKeyId,\n  secretAccessKey: secretAccessKey,\n  signatureVersion: 'v4'\n};\nexport function uploadVideosS3(_x) {\n  return _uploadVideosS.apply(this, arguments);\n}\n\nfunction _uploadVideosS() {\n  _uploadVideosS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fileName) {\n    var params, s3, valorUrl, s3ObjectUrl, presigner, uploadURL, urls;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // const rawBytes = await randomBytes(16);\n            // const imageName = rawBytes.toString('hex');\n            params = {\n              Bucket: bucketName,\n              Key: fileName\n            };\n            return _context2.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n                var getObjectCommand, response, responseDataChunks;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        getObjectCommand = new GetObjectCommand({\n                          Bucket: Bucket,\n                          Key: Key\n                        });\n                        _context.prev = 1;\n                        _context.next = 4;\n                        return client.send(getObjectCommand);\n\n                      case 4:\n                        response = _context.sent;\n                        // Store all of data chunks returned from the response data stream\n                        // into an array then use Array#join() to use the returned contents as a String\n                        responseDataChunks = []; // Attach a 'data' listener to add the chunks of data to our array\n                        // Each chunk is a Buffer instance\n\n                        response.Body.on('data', function (chunk) {\n                          return responseDataChunks.push(chunk);\n                        }); // Once the stream has no more data, join the chunks into a string and return the string\n\n                        response.Body.once('end', function () {\n                          return resolve(responseDataChunks.join(''));\n                        });\n                        _context.next = 13;\n                        break;\n\n                      case 10:\n                        _context.prev = 10;\n                        _context.t0 = _context[\"catch\"](1);\n                        return _context.abrupt(\"return\", reject(_context.t0));\n\n                      case 13:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[1, 10]]);\n              }));\n\n              return function (_x2, _x3) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n\n          case 5:\n            valorUrl = _context2.sent;\n            console.log(valorUrl); // pergar URL DO bucket\n            // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\n\n            s3ObjectUrl = parseUrl(\"https://\".concat(bucketName, \".s3.\").concat(region, \".amazonaws.com/\").concat(fileName));\n            presigner = new S3RequestPresigner({\n              credentials: credentials,\n              region: region,\n              // sha256: Hash.bind(null, 'sha256'), // In Node.js\n              sha256: Sha256 // In browsers\n\n            }); // Create a GET request from S3 url.\n            // console.log('filenName', fileName);\n\n            _context2.next = 11;\n            return presigner.presign(new HttpRequest(s3ObjectUrl));\n\n          case 11:\n            uploadURL = _context2.sent;\n            urls = uploadURL; // console.log(urls);\n            // pegar a lista do bucket\n\n            /*   const uploadURL = await s3\r\n              .listObjectsV2({\r\n                Bucket: bucketName,\r\n              })\r\n              .promise();\r\n            */\n\n            return _context2.abrupt(\"return\", urls);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _uploadVideosS.apply(this, arguments);\n}\n\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","HttpRequest","S3RequestPresigner","parseUrl","Sha256","Hash","formatUrl","Iframe","region","process","env","AWSREGION","bucketName","accessKeyId","AWSACCESS_KEY","secretAccessKey","AWSSECRET_KEY","config","update","credentials","signatureVersion","uploadVideosS3","fileName","params","Bucket","Key","Promise","resolve","reject","getObjectCommand","GetObjectCommand","client","send","response","responseDataChunks","Body","on","chunk","push","once","join","valorUrl","console","log","s3ObjectUrl","presigner","sha256","presign","uploadURL","urls"],"mappings":"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","sourcesContent":["import aws from 'aws-sdk';\r\n// import crypto from 'crypto';\r\n// import { promisify } from 'util';\r\n\r\nimport { HttpRequest } from '@aws-sdk/protocol-http';\r\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\r\nimport { parseUrl } from '@aws-sdk/url-parser';\r\nimport { Sha256 } from '@aws-crypto/sha256-browser';\r\nimport { Hash } from '@aws-sdk/hash-node';\r\nimport { formatUrl } from '@aws-sdk/util-format-url';\r\nimport Iframe from 'react-iframe';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst region = process.env.AWSREGION;\r\nconst bucketName = 'sistemaidpb';\r\nconst accessKeyId = process.env.AWSACCESS_KEY;\r\nconst secretAccessKey = process.env.AWSSECRET_KEY;\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst credentials = {\r\n  accessKeyId,\r\n  secretAccessKey,\r\n  signatureVersion: 'v4',\r\n};\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    const getObjectCommand = new GetObjectCommand({ Bucket, Key });\r\n\r\n    try {\r\n      const response = await client.send(getObjectCommand);\r\n\r\n      // Store all of data chunks returned from the response data stream\r\n      // into an array then use Array#join() to use the returned contents as a String\r\n      const responseDataChunks = [];\r\n\r\n      // Attach a 'data' listener to add the chunks of data to our array\r\n      // Each chunk is a Buffer instance\r\n      response.Body.on('data', (chunk) => responseDataChunks.push(chunk));\r\n\r\n      // Once the stream has no more data, join the chunks into a string and return the string\r\n      response.Body.once('end', () => resolve(responseDataChunks.join('')));\r\n    } catch (err) {\r\n      // Handle the error or throw\r\n      return reject(err);\r\n    }\r\n  });\r\n  const s3 = new aws.S3();\r\n  const valorUrl = await s3.getObject({ params }, (error, data) => {\r\n    if (error != null) {\r\n      console.log(`Failed to retrieve an object: ${error}`);\r\n    } else {\r\n      console.log(`Loaded ${data.ContentLength} bytes`);\r\n      // do something with data.Body\r\n    }\r\n  }).promise;\r\n  console.log(valorUrl);\r\n\r\n  // pergar URL DO bucket\r\n  // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\r\n\r\n  const s3ObjectUrl = parseUrl(\r\n    `https://${bucketName}.s3.${region}.amazonaws.com/${fileName}`,\r\n  );\r\n\r\n  const presigner = new S3RequestPresigner({\r\n    credentials,\r\n    region,\r\n    // sha256: Hash.bind(null, 'sha256'), // In Node.js\r\n    sha256: Sha256, // In browsers\r\n  });\r\n\r\n  // Create a GET request from S3 url.\r\n  // console.log('filenName', fileName);\r\n  const uploadURL = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n  const urls = uploadURL;\r\n  // console.log(urls);\r\n\r\n  // pegar a lista do bucket\r\n  /*   const uploadURL = await s3\r\n    .listObjectsV2({\r\n      Bucket: bucketName,\r\n    })\r\n    .promise();\r\n */ return urls;\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}