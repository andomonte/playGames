{"ast":null,"code":"import aws from 'aws-sdk'; // import crypto from 'crypto';\n// import { promisify } from 'util';\n\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { parseUrl } from '@aws-sdk/url-parser';\nimport { Sha256 } from '@aws-crypto/sha256-browser';\nimport { Hash } from '@aws-sdk/hash-node';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport Iframe from 'react-iframe';\nimport { Credentials } from 'next-auth/providers'; // const randomBytes = promisify(crypto.randomBytes);\n\nconst bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nconst credentials = {\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n};\nconst s3 = new aws.S3();\nconst presigner = new S3RequestPresigner({\n  credentials,\n  sha256: Hash.bind(null, 'sha256') // In Node.js\n  // sha256: Sha256 // In browsers\n\n});\nexport async function uploadVideosS3(fileName) {\n  // const rawBytes = await randomBytes(16);\n  // const imageName = rawBytes.toString('hex');\n  // console.log('valor do FileName:', fileName);\n  const params = {\n    Bucket: bucketName,\n    Key: fileName\n  };\n  const s3ObjectUrl = parseUrl(`https://${params.Bucket}.s3.${Credentials.region}.amazonaws.com/${params.Key}`);\n\n  try {\n    const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\n    console.log('PRESIGNED URL: ', formatUrl(url2)); // const uploadURL = await s3.getObject(params).promise();\n\n    const uploadURL = await s3.getSignedUrlPromise('putObject', params);\n    const urls = uploadURL;\n    console.log(urls);\n    return urls; // return valorUrl;\n  } catch (e) {\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\n  }\n}\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","HttpRequest","S3RequestPresigner","parseUrl","Sha256","Hash","formatUrl","Iframe","Credentials","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","credentials","s3","S3","presigner","sha256","bind","uploadVideosS3","fileName","params","Bucket","Key","s3ObjectUrl","url2","presign","console","log","uploadURL","getSignedUrlPromise","urls","e","Error","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,WAAT,QAA4B,qBAA5B,C,CAEA;;AAEA,MAAMC,UAAU,GAAG,aAAnB;AAEAT,GAAG,CAACU,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAKA,MAAMC,WAAW,GAAG;AAClBR,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADX;AAElBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFP;AAGlBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHF,CAApB;AAMA,MAAME,EAAE,GAAG,IAAIrB,GAAG,CAACsB,EAAR,EAAX;AAEA,MAAMC,SAAS,GAAG,IAAIrB,kBAAJ,CAAuB;AACvCkB,EAAAA,WADuC;AAEvCI,EAAAA,MAAM,EAAEnB,IAAI,CAACoB,IAAL,CAAU,IAAV,EAAgB,QAAhB,CAF+B,CAEJ;AACnC;;AAHuC,CAAvB,CAAlB;AAKA,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwC;AAC7C;AACA;AACA;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEpB,UADK;AAEbqB,IAAAA,GAAG,EAAEH;AAFQ,GAAf;AAIA,QAAMI,WAAW,GAAG5B,QAAQ,CACzB,WAAUyB,MAAM,CAACC,MAAO,OAAMrB,WAAW,CAACU,MAAO,kBAAiBU,MAAM,CAACE,GAAI,EADpD,CAA5B;;AAGA,MAAI;AACF,UAAME,IAAI,GAAG,MAAMT,SAAS,CAACU,OAAV,CAAkB,IAAIhC,WAAJ,CAAgB8B,WAAhB,CAAlB,CAAnB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B7B,SAAS,CAAC0B,IAAD,CAAxC,EAFE,CAGF;;AACA,UAAMI,SAAS,GAAG,MAAMf,EAAE,CAACgB,mBAAH,CAAuB,WAAvB,EAAoCT,MAApC,CAAxB;AACA,UAAMU,IAAI,GAAGF,SAAb;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACA,WAAOA,IAAP,CAPE,CAQF;AACD,GATD,CASE,OAAOC,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CAAW,oCAAmCD,CAAC,CAACE,OAAQ,EAAxD,CAAN;AACD;AACF;AAED,eAAef,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n// import crypto from 'crypto';\r\n// import { promisify } from 'util';\r\n\r\nimport { HttpRequest } from '@aws-sdk/protocol-http';\r\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\r\nimport { parseUrl } from '@aws-sdk/url-parser';\r\nimport { Sha256 } from '@aws-crypto/sha256-browser';\r\nimport { Hash } from '@aws-sdk/hash-node';\r\nimport { formatUrl } from '@aws-sdk/util-format-url';\r\nimport Iframe from 'react-iframe';\r\nimport { Credentials } from 'next-auth/providers';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\nconst credentials = {\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n};\r\n\r\nconst s3 = new aws.S3();\r\n\r\nconst presigner = new S3RequestPresigner({\r\n  credentials,\r\n  sha256: Hash.bind(null, 'sha256'), // In Node.js\r\n  // sha256: Sha256 // In browsers\r\n});\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n  // console.log('valor do FileName:', fileName);\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  const s3ObjectUrl = parseUrl(\r\n    `https://${params.Bucket}.s3.${Credentials.region}.amazonaws.com/${params.Key}`,\r\n  );\r\n  try {\r\n    const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n    console.log('PRESIGNED URL: ', formatUrl(url2));\r\n    // const uploadURL = await s3.getObject(params).promise();\r\n    const uploadURL = await s3.getSignedUrlPromise('putObject', params);\r\n    const urls = uploadURL;\r\n    console.log(urls);\r\n    return urls;\r\n    // return valorUrl;\r\n  } catch (e) {\r\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}