{"ast":null,"code":"import aws from 'aws-sdk';\nconst bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nconst s3 = new aws.S3();\nexport async function uploadVideosS3(fileName) {\n  const params = {\n    Bucket: bucketName,\n    Key: fileName\n  }; // Using async/await (untested)\n\n  try {\n    const headCode = await s3.headObject(params).promise();\n    const signedUrl = s3.getSignedUrlPromise('getObject', params); // Do something with signedUrl\n  } catch (headErr) {\n    if (headErr.code === 'NotFound') {// Handle no object on cloud here\n    }\n  }\n\n  try {\n    // const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\n    // console.log('PRESIGNED URL: ', formatUrl(url2));\n    // const uploadURL = await s3.getObject(params).promise();\n    const uploadURL = await s3.headObject(params).promise(); // getSignedUrlPromise('getObject', params); // s3.getSignedUrlPromise('putObject', params);\n\n    const urls = uploadURL; //    console.log(urls);\n\n    return urls; // return valorUrl;\n  } catch (e) {\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\n  }\n}\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","s3","S3","uploadVideosS3","fileName","params","Bucket","Key","headCode","headObject","promise","signedUrl","getSignedUrlPromise","headErr","code","uploadURL","urls","e","Error","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AAEA,MAAMC,UAAU,GAAG,aAAnB;AAEAD,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAMA,MAAMC,EAAE,GAAG,IAAIZ,GAAG,CAACa,EAAR,EAAX;AAEA,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwC;AAC7C,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEhB,UADK;AAEbiB,IAAAA,GAAG,EAAEH;AAFQ,GAAf,CAD6C,CAK7C;;AACA,MAAI;AACF,UAAMI,QAAQ,GAAG,MAAMP,EAAE,CAACQ,UAAH,CAAcJ,MAAd,EAAsBK,OAAtB,EAAvB;AACA,UAAMC,SAAS,GAAGV,EAAE,CAACW,mBAAH,CAAuB,WAAvB,EAAoCP,MAApC,CAAlB,CAFE,CAGF;AACD,GAJD,CAIE,OAAOQ,OAAP,EAAgB;AAChB,QAAIA,OAAO,CAACC,IAAR,KAAiB,UAArB,EAAiC,CAC/B;AACD;AACF;;AACD,MAAI;AACF;AACA;AACA;AACA,UAAMC,SAAS,GAAG,MAAMd,EAAE,CAACQ,UAAH,CAAcJ,MAAd,EAAsBK,OAAtB,EAAxB,CAJE,CAKF;;AACA,UAAMM,IAAI,GAAGD,SAAb,CANE,CAOF;;AACA,WAAOC,IAAP,CARE,CASF;AACD,GAVD,CAUE,OAAOC,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CAAW,oCAAmCD,CAAC,CAACE,OAAQ,EAAxD,CAAN;AACD;AACF;AAED,eAAehB,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst s3 = new aws.S3();\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  // Using async/await (untested)\r\n  try {\r\n    const headCode = await s3.headObject(params).promise();\r\n    const signedUrl = s3.getSignedUrlPromise('getObject', params);\r\n    // Do something with signedUrl\r\n  } catch (headErr) {\r\n    if (headErr.code === 'NotFound') {\r\n      // Handle no object on cloud here\r\n    }\r\n  }\r\n  try {\r\n    // const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n    // console.log('PRESIGNED URL: ', formatUrl(url2));\r\n    // const uploadURL = await s3.getObject(params).promise();\r\n    const uploadURL = await s3.headObject(params).promise();\r\n    // getSignedUrlPromise('getObject', params); // s3.getSignedUrlPromise('putObject', params);\r\n    const urls = uploadURL;\r\n    //    console.log(urls);\r\n    return urls;\r\n    // return valorUrl;\r\n  } catch (e) {\r\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}