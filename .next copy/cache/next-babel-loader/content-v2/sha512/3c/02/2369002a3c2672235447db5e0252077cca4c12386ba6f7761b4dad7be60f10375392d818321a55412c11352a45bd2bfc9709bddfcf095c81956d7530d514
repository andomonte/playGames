{"ast":null,"code":"import _regeneratorRuntime from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport aws from 'aws-sdk'; // import crypto from 'crypto';\n// import { promisify } from 'util';\n\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { parseUrl } from '@aws-sdk/url-parser';\nimport { Sha256 } from '@aws-crypto/sha256-browser';\nimport { Hash } from '@aws-sdk/hash-node';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport Iframe from 'react-iframe'; // const randomBytes = promisify(crypto.randomBytes);\n\nvar region = process.env.AWSREGION;\nvar bucketName = 'sistemaidpb';\nvar accessKeyId = process.env.AWSACCESS_KEY;\nvar secretAccessKey = process.env.AWSSECRET_KEY;\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nvar credentials = {\n  accessKeyId: accessKeyId,\n  secretAccessKey: secretAccessKey,\n  signatureVersion: 'v4'\n};\nexport function uploadVideosS3(_x) {\n  return _uploadVideosS.apply(this, arguments);\n}\n\nfunction _uploadVideosS() {\n  _uploadVideosS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n    var params, s3ObjectUrl, presigner, uploadURL, urls;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // const rawBytes = await randomBytes(16);\n            // const imageName = rawBytes.toString('hex');\n            params = {\n              Bucket: bucketName,\n              Key: fileName\n            }; // pergar URL DO bucket\n            // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\n\n            s3ObjectUrl = parseUrl(\"https://\".concat(bucketName, \".s3.\").concat(region, \".amazonaws.com/\").concat(fileName));\n            presigner = new S3RequestPresigner({\n              credentials: credentials,\n              region: region,\n              // sha256: Hash.bind(null, 'sha256'), // In Node.js\n              sha256: Sha256 // In browsers\n\n            }); // Create a GET request from S3 url.\n\n            console.log('filenName', fileName);\n            _context.next = 6;\n            return presigner.presign(new HttpRequest(s3ObjectUrl));\n\n          case 6:\n            uploadURL = _context.sent;\n            urls = formatUrl(uploadURL); // pegar a lista do bucket\n\n            /*   const uploadURL = await s3\r\n              .listObjectsV2({\r\n                Bucket: bucketName,\r\n              })\r\n              .promise();\r\n            */\n\n            return _context.abrupt(\"return\", urls);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _uploadVideosS.apply(this, arguments);\n}\n\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","HttpRequest","S3RequestPresigner","parseUrl","Sha256","Hash","formatUrl","Iframe","region","process","env","AWSREGION","bucketName","accessKeyId","AWSACCESS_KEY","secretAccessKey","AWSSECRET_KEY","config","update","credentials","signatureVersion","uploadVideosS3","fileName","params","Bucket","Key","s3ObjectUrl","presigner","sha256","console","log","presign","uploadURL","urls"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,SAAhB,C,CACA;AACA;;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA3B;AACA,IAAMC,UAAU,GAAG,aAAnB;AACA,IAAMC,WAAW,GAAGJ,OAAO,CAACC,GAAR,CAAYI,aAAhC;AACA,IAAMC,eAAe,GAAGN,OAAO,CAACC,GAAR,CAAYM,aAApC;AAEAhB,GAAG,CAACiB,MAAJ,CAAWC,MAAX,CAAkB;AAChBH,EAAAA,eAAe,EAAEN,OAAO,CAACC,GAAR,CAAYM,aADb;AAEhBH,EAAAA,WAAW,EAAEJ,OAAO,CAACC,GAAR,CAAYI,aAFT;AAGhBN,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAHJ,CAAlB;AAMA,IAAMQ,WAAW,GAAG;AAClBN,EAAAA,WAAW,EAAXA,WADkB;AAElBE,EAAAA,eAAe,EAAfA,eAFkB;AAGlBK,EAAAA,gBAAgB,EAAE;AAHA,CAApB;AAMA,gBAAsBC,cAAtB;AAAA;AAAA;;;4EAAO,iBAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACA;AAEMC,YAAAA,MAJD,GAIU;AACbC,cAAAA,MAAM,EAAEZ,UADK;AAEba,cAAAA,GAAG,EAAEH;AAFQ,aAJV,EAQL;AACA;;AAEMI,YAAAA,WAXD,GAWevB,QAAQ,mBACfS,UADe,iBACEJ,MADF,4BAC0Bc,QAD1B,EAXvB;AAcCK,YAAAA,SAdD,GAca,IAAIzB,kBAAJ,CAAuB;AACvCiB,cAAAA,WAAW,EAAXA,WADuC;AAEvCX,cAAAA,MAAM,EAANA,MAFuC;AAGvC;AACAoB,cAAAA,MAAM,EAAExB,MAJ+B,CAIvB;;AAJuB,aAAvB,CAdb,EAoBL;;AACAyB,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,QAAzB;AArBK;AAAA,mBAsBmBK,SAAS,CAACI,OAAV,CAAkB,IAAI9B,WAAJ,CAAgByB,WAAhB,CAAlB,CAtBnB;;AAAA;AAsBCM,YAAAA,SAtBD;AAwBCC,YAAAA,IAxBD,GAwBQ3B,SAAS,CAAC0B,SAAD,CAxBjB,EA0BL;;AACA;AACF;AACA;AACA;AACA;AACA;;AAhCO,6CAgCIC,IAhCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmCP,eAAeZ,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n// import crypto from 'crypto';\r\n// import { promisify } from 'util';\r\n\r\nimport { HttpRequest } from '@aws-sdk/protocol-http';\r\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\r\nimport { parseUrl } from '@aws-sdk/url-parser';\r\nimport { Sha256 } from '@aws-crypto/sha256-browser';\r\nimport { Hash } from '@aws-sdk/hash-node';\r\nimport { formatUrl } from '@aws-sdk/util-format-url';\r\nimport Iframe from 'react-iframe';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst region = process.env.AWSREGION;\r\nconst bucketName = 'sistemaidpb';\r\nconst accessKeyId = process.env.AWSACCESS_KEY;\r\nconst secretAccessKey = process.env.AWSSECRET_KEY;\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst credentials = {\r\n  accessKeyId,\r\n  secretAccessKey,\r\n  signatureVersion: 'v4',\r\n};\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  // pergar URL DO bucket\r\n  // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\r\n\r\n  const s3ObjectUrl = parseUrl(\r\n    `https://${bucketName}.s3.${region}.amazonaws.com/${fileName}`,\r\n  );\r\n  const presigner = new S3RequestPresigner({\r\n    credentials,\r\n    region,\r\n    // sha256: Hash.bind(null, 'sha256'), // In Node.js\r\n    sha256: Sha256, // In browsers\r\n  });\r\n  // Create a GET request from S3 url.\r\n  console.log('filenName', fileName);\r\n  const uploadURL = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n\r\n  const urls = formatUrl(uploadURL);\r\n\r\n  // pegar a lista do bucket\r\n  /*   const uploadURL = await s3\r\n    .listObjectsV2({\r\n      Bucket: bucketName,\r\n    })\r\n    .promise();\r\n */ return urls;\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}