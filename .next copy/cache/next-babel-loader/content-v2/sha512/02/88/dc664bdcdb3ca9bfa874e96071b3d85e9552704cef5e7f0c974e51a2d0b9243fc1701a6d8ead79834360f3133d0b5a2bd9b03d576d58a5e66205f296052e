{"ast":null,"code":"import _defineProperty from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\src\\\\next\\\\sistemas\\\\idpb-app\\\\src\\\\components\\\\midiaPlay\\\\enviar.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nfunction enviar() {\n  _s();\n\n  var onDrop = useCallback(function (acceptedFiles) {// Do something with the files\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragActive = _useDropzone.isDragActive;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", _objectSpread(_objectSpread({}, getRootProps()), {}, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps()), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop the files here ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to select files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(enviar, \"yd//yJtVY5DqPYzQY0xGsdgoRlk=\", false, function () {\n  return [useDropzone];\n});\n\nexport default enviar;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/components/midiaPlay/enviar.js"],"names":["React","useCallback","useDropzone","enviar","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,SAASC,MAAT,GAAkB;AAAA;;AAChB,MAAMC,MAAM,GAAGH,WAAW,CAAC,UAACI,aAAD,EAAmB,CAC5C;AACD,GAFyB,EAEvB,EAFuB,CAA1B;;AADgB,qBAIsCH,WAAW,CAAC;AAAEE,IAAAA,MAAM,EAANA;AAAF,GAAD,CAJjD;AAAA,MAIRE,YAJQ,gBAIRA,YAJQ;AAAA,MAIMC,aAJN,gBAIMA,aAJN;AAAA,MAIqBC,YAJrB,gBAIqBA,YAJrB;;AAMhB,sBACE,+CAASF,YAAY,EAArB;AAAA,4BACE,mCAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,YAAY,gBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,gBAGX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAhBQL,M;UAI+CD,W;;;AAcxD,eAAeC,MAAf","sourcesContent":["import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nfunction enviar() {\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    // Do something with the files\r\n  }, []);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      {isDragActive ? (\r\n        <p>Drop the files here ...</p>\r\n      ) : (\r\n        <p>Drag 'n' drop some files here, or click to select files</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default enviar;\r\n"]},"metadata":{},"sourceType":"module"}