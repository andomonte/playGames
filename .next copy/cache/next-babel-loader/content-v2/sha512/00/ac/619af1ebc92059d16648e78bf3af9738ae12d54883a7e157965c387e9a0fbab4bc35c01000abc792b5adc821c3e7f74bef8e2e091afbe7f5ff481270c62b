{"ast":null,"code":"import aws from 'aws-sdk';\nimport { HttpRequest } from '@aws-sdk/protocol-http';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { parseUrl } from '@aws-sdk/url-parser';\nimport { Sha256 } from '@aws-crypto/sha256-browser'; // import { Hash } from '@aws-sdk/hash-node';\n\nimport { formatUrl } from '@aws-sdk/util-format-url'; // const randomBytes = promisify(crypto.randomBytes);\n\nconst region = process.env.AWSREGION;\nconst bucketName = 'sistemaidpb';\nconst accessKeyId = process.env.AWSACCESS_KEY;\nconst secretAccessKey = process.env.AWSSECRET_KEY;\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nconst credentials = {\n  accessKeyId,\n  secretAccessKey,\n  signatureVersion: 'v4'\n};\nexport async function downloadImgS3(fileName) {\n  console.log('chegou aqui'); // const rawBytes = await randomBytes(16);\n  // const imageName = rawBytes.toString('hex');\n  // pergar URL DO bucket\n  // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\n\n  const s3ObjectUrl = parseUrl(`https://${bucketName}.s3.${region}.amazonaws.com/${fileName}`);\n  const presigner = new S3RequestPresigner({\n    credentials,\n    region,\n    //  sha256: Hash.bind(null, 'sha256'), // In Node.js\n    sha256: Sha256 // In browsers\n\n  }); // Create a GET request from S3 url.\n\n  const uploadURL = await presigner.presign(new HttpRequest(s3ObjectUrl));\n  console.log('PRESIGNED URL: ', formatUrl(uploadURL)); // pegar a lista do bucket\n\n  /*   const uploadURL = await s3\r\n    .listObjectsV2({\r\n      Bucket: bucketName,\r\n    })\r\n    .promise();\r\n  */\n\n  return uploadURL;\n}\nexport default downloadImgS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/downloadImgS3.js"],"names":["aws","HttpRequest","S3RequestPresigner","parseUrl","Sha256","formatUrl","region","process","env","AWSREGION","bucketName","accessKeyId","AWSACCESS_KEY","secretAccessKey","AWSSECRET_KEY","config","update","credentials","signatureVersion","downloadImgS3","fileName","console","log","s3ObjectUrl","presigner","sha256","uploadURL","presign"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,MAAT,QAAuB,4BAAvB,C,CACA;;AACA,SAASC,SAAT,QAA0B,0BAA1B,C,CAEA;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA3B;AACA,MAAMC,UAAU,GAAG,aAAnB;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACC,GAAR,CAAYI,aAAhC;AACA,MAAMC,eAAe,GAAGN,OAAO,CAACC,GAAR,CAAYM,aAApC;AAEAd,GAAG,CAACe,MAAJ,CAAWC,MAAX,CAAkB;AAChBH,EAAAA,eAAe,EAAEN,OAAO,CAACC,GAAR,CAAYM,aADb;AAEhBH,EAAAA,WAAW,EAAEJ,OAAO,CAACC,GAAR,CAAYI,aAFT;AAGhBN,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAHJ,CAAlB;AAMA,MAAMQ,WAAW,GAAG;AAClBN,EAAAA,WADkB;AAElBE,EAAAA,eAFkB;AAGlBK,EAAAA,gBAAgB,EAAE;AAHA,CAApB;AAMA,OAAO,eAAeC,aAAf,CAA6BC,QAA7B,EAAuC;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAD4C,CAE5C;AACA;AAEA;AACA;;AAEA,QAAMC,WAAW,GAAGpB,QAAQ,CACzB,WAAUO,UAAW,OAAMJ,MAAO,kBAAiBc,QAAS,EADnC,CAA5B;AAGA,QAAMI,SAAS,GAAG,IAAItB,kBAAJ,CAAuB;AACvCe,IAAAA,WADuC;AAEvCX,IAAAA,MAFuC;AAGvC;AACAmB,IAAAA,MAAM,EAAErB,MAJ+B,CAIvB;;AAJuB,GAAvB,CAAlB,CAX4C,CAiB5C;;AACA,QAAMsB,SAAS,GAAG,MAAMF,SAAS,CAACG,OAAV,CAAkB,IAAI1B,WAAJ,CAAgBsB,WAAhB,CAAlB,CAAxB;AAEAF,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BjB,SAAS,CAACqB,SAAD,CAAxC,EApB4C,CAsB5C;;AACA;AACF;AACA;AACA;AACA;AACA;;AAAI,SAAOA,SAAP;AACH;AAED,eAAeP,aAAf","sourcesContent":["import aws from 'aws-sdk';\r\n\r\nimport { HttpRequest } from '@aws-sdk/protocol-http';\r\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\r\nimport { parseUrl } from '@aws-sdk/url-parser';\r\nimport { Sha256 } from '@aws-crypto/sha256-browser';\r\n// import { Hash } from '@aws-sdk/hash-node';\r\nimport { formatUrl } from '@aws-sdk/util-format-url';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst region = process.env.AWSREGION;\r\nconst bucketName = 'sistemaidpb';\r\nconst accessKeyId = process.env.AWSACCESS_KEY;\r\nconst secretAccessKey = process.env.AWSSECRET_KEY;\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst credentials = {\r\n  accessKeyId,\r\n  secretAccessKey,\r\n  signatureVersion: 'v4',\r\n};\r\n\r\nexport async function downloadImgS3(fileName) {\r\n  console.log('chegou aqui');\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n\r\n  // pergar URL DO bucket\r\n  // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\r\n\r\n  const s3ObjectUrl = parseUrl(\r\n    `https://${bucketName}.s3.${region}.amazonaws.com/${fileName}`,\r\n  );\r\n  const presigner = new S3RequestPresigner({\r\n    credentials,\r\n    region,\r\n    //  sha256: Hash.bind(null, 'sha256'), // In Node.js\r\n    sha256: Sha256, // In browsers\r\n  });\r\n  // Create a GET request from S3 url.\r\n  const uploadURL = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n\r\n  console.log('PRESIGNED URL: ', formatUrl(uploadURL));\r\n\r\n  // pegar a lista do bucket\r\n  /*   const uploadURL = await s3\r\n    .listObjectsV2({\r\n      Bucket: bucketName,\r\n    })\r\n    .promise();\r\n */ return uploadURL;\r\n}\r\n\r\nexport default downloadImgS3;\r\n"]},"metadata":{},"sourceType":"module"}