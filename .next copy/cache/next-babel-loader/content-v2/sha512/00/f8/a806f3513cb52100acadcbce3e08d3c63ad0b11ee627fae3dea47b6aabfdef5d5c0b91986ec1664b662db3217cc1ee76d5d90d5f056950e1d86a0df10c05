{"ast":null,"code":"import aws, { SESV2 } from 'aws-sdk'; // import crypto from 'crypto';\n// import { promisify } from 'util';\n// const randomBytes = promisify(crypto.randomBytes);\n\nconst region = process.env.AWSREGION;\nconst bucketName = 'sistemaidpb';\nconst accessKeyId = process.env.AWSACCESS_KEY;\nconst secretAccessKey = process.env.AWSSECRET_KEY;\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nconst s3 = new aws.S3({\n  region,\n  accessKeyId,\n  secretAccessKey,\n  signatureVersion: 'v4'\n});\nexport async function uploadVideosS3(fileName) {\n  // const rawBytes = await randomBytes(16);\n  // const imageName = rawBytes.toString('hex');\n  const params = {\n    Bucket: bucketName,\n    Key: fileName\n  }; // pergar URL DO bucket\n  // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\n\n  const uploadURL = await s3.getObject(params, (error, data) => {\n    if (error != null) {\n      console.log('deu erro:', error);\n    } else {\n      console.log(data.ContentLength); //   alert(`Loaded ${data.ContentLength} bytes`);\n      // do something with data.Body\n    }\n  }); // pegar a lista do bucket\n\n  /*   const uploadURL = await s3\r\n    .listObjectsV2({\r\n      Bucket: bucketName,\r\n    })\r\n    .promise();\r\n  */\n\n  return uploadURL;\n}\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","SESV2","region","process","env","AWSREGION","bucketName","accessKeyId","AWSACCESS_KEY","secretAccessKey","AWSSECRET_KEY","config","update","s3","S3","signatureVersion","uploadVideosS3","fileName","params","Bucket","Key","uploadURL","getObject","error","data","console","log","ContentLength"],"mappings":"AAAA,OAAOA,GAAP,IAAcC,KAAd,QAA2B,SAA3B,C,CACA;AACA;AAEA;;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA3B;AACA,MAAMC,UAAU,GAAG,aAAnB;AACA,MAAMC,WAAW,GAAGJ,OAAO,CAACC,GAAR,CAAYI,aAAhC;AACA,MAAMC,eAAe,GAAGN,OAAO,CAACC,GAAR,CAAYM,aAApC;AAEAV,GAAG,CAACW,MAAJ,CAAWC,MAAX,CAAkB;AAChBH,EAAAA,eAAe,EAAEN,OAAO,CAACC,GAAR,CAAYM,aADb;AAEhBH,EAAAA,WAAW,EAAEJ,OAAO,CAACC,GAAR,CAAYI,aAFT;AAGhBN,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAHJ,CAAlB;AAMA,MAAMQ,EAAE,GAAG,IAAIb,GAAG,CAACc,EAAR,CAAW;AACpBZ,EAAAA,MADoB;AAEpBK,EAAAA,WAFoB;AAGpBE,EAAAA,eAHoB;AAIpBM,EAAAA,gBAAgB,EAAE;AAJE,CAAX,CAAX;AAOA,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwC;AAC7C;AACA;AAEA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEb,UADK;AAEbc,IAAAA,GAAG,EAAEH;AAFQ,GAAf,CAJ6C,CAQ7C;AACA;;AACA,QAAMI,SAAS,GAAG,MAAMR,EAAE,CAACS,SAAH,CAAaJ,MAAb,EAAqB,CAACK,KAAD,EAAQC,IAAR,KAAiB;AAC5D,QAAID,KAAK,IAAI,IAAb,EAAmB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,KAAzB;AACD,KAFD,MAEO;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,aAAjB,EADK,CAEL;AACA;AACD;AACF,GARuB,CAAxB,CAV6C,CAoB7C;;AACA;AACF;AACA;AACA;AACA;AACA;;AAAI,SAAON,SAAP;AACH;AAED,eAAeL,cAAf","sourcesContent":["import aws, { SESV2 } from 'aws-sdk';\r\n// import crypto from 'crypto';\r\n// import { promisify } from 'util';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst region = process.env.AWSREGION;\r\nconst bucketName = 'sistemaidpb';\r\nconst accessKeyId = process.env.AWSACCESS_KEY;\r\nconst secretAccessKey = process.env.AWSSECRET_KEY;\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst s3 = new aws.S3({\r\n  region,\r\n  accessKeyId,\r\n  secretAccessKey,\r\n  signatureVersion: 'v4',\r\n});\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  // pergar URL DO bucket\r\n  // const uploadURL = await s3.getSignedUrlPromise('putObject', params);\r\n  const uploadURL = await s3.getObject(params, (error, data) => {\r\n    if (error != null) {\r\n      console.log('deu erro:', error);\r\n    } else {\r\n      console.log(data.ContentLength);\r\n      //   alert(`Loaded ${data.ContentLength} bytes`);\r\n      // do something with data.Body\r\n    }\r\n  });\r\n\r\n  // pegar a lista do bucket\r\n  /*   const uploadURL = await s3\r\n    .listObjectsV2({\r\n      Bucket: bucketName,\r\n    })\r\n    .promise();\r\n */ return uploadURL;\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}