{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\src\\\\next\\\\sistemas\\\\idpb-app\\\\src\\\\pages\\\\api\\\\auth\\\\[...nextauth].js\";\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport useSWR from 'swr';\nimport fetch from 'unfetch'; // Configure one or more authentication providers\n\nconst options = {\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code'\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const fetcher = url => fetch(url).then(r => r.json());\n\n      const {\n        data,\n        error\n      } = useSWR('/api/getUser', fetcher, {\n        initialData: user.username\n      });\n      if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"failed to load\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }, this);\n      if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }, this); //   return <div>hello {data.name}!</div>;\n\n      const email = 'andomonte@gmail.com';\n      console.log(user);\n\n      if (account.provider === 'google' && profile.verified_email === true && profile.email.endsWith(email)) {\n        return true;\n      }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","useSWR","fetch","options","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","callbacks","signIn","user","account","profile","fetcher","url","then","r","json","data","error","initialData","username","email","console","log","provider","verified_email","endsWith","session","jwt","secret","JWT_SECRET","req","res"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,CACT;AACAJ,EAAAA,SAAS,CAACK,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd;AAJa,GAAjB,CAFS,CADG;AAUdC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAMC,OAAO,GAAIC,GAAD,IAASjB,KAAK,CAACiB,GAAD,CAAL,CAAWC,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAAvB,CAAzB;;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBvB,MAAM,CAAC,cAAD,EAAiBiB,OAAjB,EAA0B;AACtDO,QAAAA,WAAW,EAAEV,IAAI,CAACW;AADoC,OAA1B,CAA9B;AAIA,UAAIF,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACX,UAAI,CAACD,IAAL,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP,CAPwB,CAQnC;;AACA,YAAMI,KAAK,GAAG,qBAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;;AACA,UACEC,OAAO,CAACc,QAAR,KAAqB,QAArB,IACAb,OAAO,CAACc,cAAR,KAA2B,IAD3B,IAEAd,OAAO,CAACU,KAAR,CAAcK,QAAd,CAAuBL,KAAvB,CAHF,EAIE;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;AApBQ,GAVG;AAgCdM,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GAhCK;AAmCdA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAE5B,OAAO,CAACC,GAAR,CAAY4B;AADjB,GAnCS,CAsCd;AACA;;AAvCc,CAAhB;AAyCA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAcvC,QAAQ,CAACsC,GAAD,EAAMC,GAAN,EAAWnC,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\nimport useSWR from 'swr';\r\nimport fetch from 'unfetch';\r\n\r\n// Configure one or more authentication providers\r\nconst options = {\r\n  providers: [\r\n    // ...add more providers here\r\n    Providers.Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorizationUrl:\r\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn(user, account, profile) {\r\n      const fetcher = (url) => fetch(url).then((r) => r.json());\r\n      const { data, error } = useSWR('/api/getUser', fetcher, {\r\n        initialData: user.username,\r\n      });\r\n\r\n      if (error) return <div>failed to load</div>;\r\n      if (!data) return <div>loading...</div>;\r\n      //   return <div>hello {data.name}!</div>;\r\n      const email = 'andomonte@gmail.com';\r\n      console.log(user);\r\n      if (\r\n        account.provider === 'google' &&\r\n        profile.verified_email === true &&\r\n        profile.email.endsWith(email)\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  jwt: {\r\n    secret: process.env.JWT_SECRET,\r\n  },\r\n  // A database is optional, but required to persist accounts in a database\r\n  // database: process.env.DATABASE_URL,\r\n};\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}