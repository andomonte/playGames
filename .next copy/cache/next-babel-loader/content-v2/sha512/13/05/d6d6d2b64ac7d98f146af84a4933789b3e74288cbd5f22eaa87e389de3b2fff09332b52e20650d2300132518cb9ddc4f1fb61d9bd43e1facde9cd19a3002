{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\nconst data = [{\n  email: 'andomonte@gmail.com'\n}]; // Configure one or more authentication providers\n\nconst options = {\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code'\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\n      // if (!data) return <div>loading...</div>;\n      //   return <div>hello {data.name}!</div>;\n      const email = 'andomonte@gmail.com';\n      console.log(user, data);\n\n      if (account.provider === 'google' && profile.verified_email === true && profile.email.endsWith(email)) {\n        return true;\n      }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","PrismaClient","prisma","data","email","options","providers","Google","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","authorizationUrl","callbacks","signIn","user","account","profile","console","log","provider","verified_email","endsWith","session","jwt","secret","JWT_SECRET","req","res"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;AACA,MAAME,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAD,CAAb,C,CACA;;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,CACT;AACAN,EAAAA,SAAS,CAACO,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBADP;AAEfC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,oBAFX;AAGfC,IAAAA,gBAAgB,EACd;AAJa,GAAjB,CAFS,CADG;AAUdC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC;AAEA;AACA;AACA,YAAMf,KAAK,GAAG,qBAAd;AACAgB,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBd,IAAlB;;AACA,UACEe,OAAO,CAACI,QAAR,KAAqB,QAArB,IACAH,OAAO,CAACI,cAAR,KAA2B,IAD3B,IAEAJ,OAAO,CAACf,KAAR,CAAcoB,QAAd,CAAuBpB,KAAvB,CAHF,EAIE;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;AAhBQ,GAVG;AA4BdqB,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE;AADE,GA5BK;AA+BdA,EAAAA,GAAG,EAAE;AACHC,IAAAA,MAAM,EAAElB,OAAO,CAACC,GAAR,CAAYkB;AADjB,GA/BS,CAkCd;AACA;;AAnCc,CAAhB;AAqCA,gBAAe,CAACC,GAAD,EAAMC,GAAN,KAAc/B,QAAQ,CAAC8B,GAAD,EAAMC,GAAN,EAAWzB,OAAX,CAArC","sourcesContent":["import NextAuth from 'next-auth';\r\nimport Providers from 'next-auth/providers';\r\n\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\nconst prisma = new PrismaClient();\r\nconst data = [{ email: 'andomonte@gmail.com' }];\r\n// Configure one or more authentication providers\r\nconst options = {\r\n  providers: [\r\n    // ...add more providers here\r\n    Providers.Google({\r\n      clientId: process.env.GOOGLE_CLIENT_ID,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n      authorizationUrl:\r\n        'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code',\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn(user, account, profile) {\r\n      //      const dados = await prisma.Usuarios({ loginUsuario: user });\r\n\r\n      // if (!data) return <div>loading...</div>;\r\n      //   return <div>hello {data.name}!</div>;\r\n      const email = 'andomonte@gmail.com';\r\n      console.log(user, data);\r\n      if (\r\n        account.provider === 'google' &&\r\n        profile.verified_email === true &&\r\n        profile.email.endsWith(email)\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n  },\r\n  session: {\r\n    jwt: true,\r\n  },\r\n  jwt: {\r\n    secret: process.env.JWT_SECRET,\r\n  },\r\n  // A database is optional, but required to persist accounts in a database\r\n  // database: process.env.DATABASE_URL,\r\n};\r\nexport default (req, res) => NextAuth(req, res, options);\r\n"]},"metadata":{},"sourceType":"module"}