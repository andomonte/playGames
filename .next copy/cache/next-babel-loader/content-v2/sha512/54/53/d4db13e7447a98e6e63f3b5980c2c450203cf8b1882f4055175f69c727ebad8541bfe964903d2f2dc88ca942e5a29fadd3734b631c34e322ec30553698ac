{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers'; // Configure one or more authentication providers\n\nconst options = {\n  providers: [// ...add more providers here\n  Providers.Google({\n    clientId: process.env.GOOGLE_CLIENT_ID,\n    clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline&response_type=code'\n  }), Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: 'Credentials',\n    // The credentials is used to generate a suitable form on the sign in page.\n    // You can specify whatever fields you are expecting to be submitted.\n    // e.g. domain, username, password, 2FA token, etc.\n    credentials: {\n      username: {\n        label: 'Username',\n        type: 'text',\n        placeholder: 'jsmith'\n      },\n      password: {\n        label: 'Password',\n        type: 'password'\n      }\n    },\n\n    async authorize(credentials) {\n      // Add logic here to look up the user from the credentials supplied\n      console.log(credentials);\n      const user = {\n        id: 1,\n        name: 'J Smith',\n        email: 'jsmith@example.com'\n      };\n\n      if (user) {\n        // Any object returned will be saved in `user` property of the JWT\n        return user;\n      } // If you return null or false then the credentials will be rejected\n\n\n      return null; // You can also Reject this callback with an Error or with a URL:\n      // throw new Error('error message') // Redirect to error page\n      // throw '/path/to/redirect'        // Redirect to a URL\n    }\n\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      console.log(`user=${user.name}, account=${account.provider}, profile=${profile.email}`);\n\n      if (account.provider === 'google' && profile.verified_email === true && profile.email.endsWith('andomonte@gmail.com')) {\n        return true;\n      }\n\n      return false;\n    }\n\n  },\n  session: {\n    jwt: true\n  },\n  jwt: {\n    secret: process.env.JWT_SECRET\n  } // A database is optional, but required to persist accounts in a database\n  // database: process.env.DATABASE_URL,\n\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":null,"metadata":{},"sourceType":"module"}