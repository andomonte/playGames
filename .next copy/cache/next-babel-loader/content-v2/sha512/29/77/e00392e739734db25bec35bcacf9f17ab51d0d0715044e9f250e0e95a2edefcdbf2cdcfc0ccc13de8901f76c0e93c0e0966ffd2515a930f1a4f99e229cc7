{"ast":null,"code":"import _regeneratorRuntime from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/src/next/sistemas/idpb-app/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport aws from 'aws-sdk';\nvar bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nvar s3 = new aws.S3();\nexport function uploadVideosS3(_x) {\n  return _uploadVideosS.apply(this, arguments);\n}\n\nfunction _uploadVideosS() {\n  _uploadVideosS = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fileName) {\n    var params, headCode, signedUrl;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            params = {\n              Bucket: bucketName,\n              Key: fileName\n            }; // Using async/await (untested)\n\n            _context.prev = 1;\n            _context.next = 4;\n            return s3.headObject(params).promise();\n\n          case 4:\n            headCode = _context.sent;\n            _context.next = 7;\n            return s3.getSignedUrlPromise('getObject', params);\n\n          case 7:\n            signedUrl = _context.sent;\n            return _context.abrupt(\"return\", signedUrl);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n\n            if (_context.t0.code === 'NotFound') {// Handle no object on cloud here\n            }\n\n            throw new Error(\"Could not retrieve file from S3: \".concat(_context.t0.message));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n  return _uploadVideosS.apply(this, arguments);\n}\n\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","s3","S3","uploadVideosS3","fileName","params","Bucket","Key","headObject","promise","headCode","getSignedUrlPromise","signedUrl","code","Error","message"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,SAAhB;AAEA,IAAMC,UAAU,GAAG,aAAnB;AAEAD,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAMA,IAAMC,EAAE,GAAG,IAAIZ,GAAG,CAACa,EAAR,EAAX;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;4EAAO,iBAA8BC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,MADD,GACU;AACbC,cAAAA,MAAM,EAAEhB,UADK;AAEbiB,cAAAA,GAAG,EAAEH;AAFQ,aADV,EAKL;;AALK;AAAA;AAAA,mBAOoBH,EAAE,CAACO,UAAH,CAAcH,MAAd,EAAsBI,OAAtB,EAPpB;;AAAA;AAOGC,YAAAA,QAPH;AAAA;AAAA,mBAQqBT,EAAE,CAACU,mBAAH,CAAuB,WAAvB,EAAoCN,MAApC,CARrB;;AAAA;AAQGO,YAAAA,SARH;AAAA,6CAUIA,SAVJ;;AAAA;AAAA;AAAA;;AAYH,gBAAI,YAAQC,IAAR,KAAiB,UAArB,EAAiC,CAC/B;AACD;;AAdE,kBAeG,IAAIC,KAAJ,4CAA8C,YAAQC,OAAtD,EAfH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAmBP,eAAeZ,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\n\r\nconst s3 = new aws.S3();\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  // Using async/await (untested)\r\n  try {\r\n    const headCode = await s3.headObject(params).promise();\r\n    const signedUrl = await s3.getSignedUrlPromise('getObject', params);\r\n    // Do something with signedUrl\r\n    return signedUrl;\r\n  } catch (headErr) {\r\n    if (headErr.code === 'NotFound') {\r\n      // Handle no object on cloud here\r\n    }\r\n    throw new Error(`Could not retrieve file from S3: ${headErr.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}