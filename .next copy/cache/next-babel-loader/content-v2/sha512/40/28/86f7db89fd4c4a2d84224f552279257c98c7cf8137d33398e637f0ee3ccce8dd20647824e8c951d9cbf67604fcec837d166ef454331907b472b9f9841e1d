{"ast":null,"code":"import aws from 'aws-sdk'; // const randomBytes = promisify(crypto.randomBytes);\n\nconst bucketName = 'sistemaidpb';\naws.config.update({\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n});\nconst credentials = {\n  secretAccessKey: process.env.AWSSECRET_KEY,\n  accessKeyId: process.env.AWSACCESS_KEY,\n  region: process.env.AWSREGION\n};\nconst s3 = new aws.S3();\nexport async function uploadVideosS3(fileName) {\n  // const rawBytes = await randomBytes(16);\n  // const imageName = rawBytes.toString('hex');\n  // console.log('valor do FileName:', fileName);\n  const params = {\n    Bucket: bucketName,\n    Key: fileName\n  };\n\n  try {\n    // const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\n    // console.log('PRESIGNED URL: ', formatUrl(url2));\n    // const uploadURL = await s3.getObject(params).promise();\n    const uploadURL = await s3.getSignedUrlPromise('getObject', params); // s3.getSignedUrlPromise('putObject', params);\n\n    const urls = uploadURL;\n    console.log(urls);\n    return urls; // return valorUrl;\n  } catch (e) {\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\n  }\n}\nexport default uploadVideosS3;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/utils/uploadImagensS3.js"],"names":["aws","bucketName","config","update","secretAccessKey","process","env","AWSSECRET_KEY","accessKeyId","AWSACCESS_KEY","region","AWSREGION","credentials","s3","S3","uploadVideosS3","fileName","params","Bucket","Key","uploadURL","getSignedUrlPromise","urls","console","log","e","Error","message"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,SAAhB,C,CAEA;;AAEA,MAAMC,UAAU,GAAG,aAAnB;AAEAD,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADb;AAEhBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFT;AAGhBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHJ,CAAlB;AAKA,MAAMC,WAAW,GAAG;AAClBR,EAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,aADX;AAElBC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,aAFP;AAGlBC,EAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHF,CAApB;AAMA,MAAME,EAAE,GAAG,IAAIb,GAAG,CAACc,EAAR,EAAX;AAEA,OAAO,eAAeC,cAAf,CAA8BC,QAA9B,EAAwC;AAC7C;AACA;AACA;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEjB,UADK;AAEbkB,IAAAA,GAAG,EAAEH;AAFQ,GAAf;;AAIA,MAAI;AACF;AACA;AACA;AACA,UAAMI,SAAS,GAAG,MAAMP,EAAE,CAACQ,mBAAH,CAAuB,WAAvB,EAAoCJ,MAApC,CAAxB,CAJE,CAImE;;AACrE,UAAMK,IAAI,GAAGF,SAAb;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,WAAOA,IAAP,CAPE,CAQF;AACD,GATD,CASE,OAAOG,CAAP,EAAU;AACV,UAAM,IAAIC,KAAJ,CAAW,oCAAmCD,CAAC,CAACE,OAAQ,EAAxD,CAAN;AACD;AACF;AAED,eAAeZ,cAAf","sourcesContent":["import aws from 'aws-sdk';\r\n\r\n// const randomBytes = promisify(crypto.randomBytes);\r\n\r\nconst bucketName = 'sistemaidpb';\r\n\r\naws.config.update({\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n});\r\nconst credentials = {\r\n  secretAccessKey: process.env.AWSSECRET_KEY,\r\n  accessKeyId: process.env.AWSACCESS_KEY,\r\n  region: process.env.AWSREGION,\r\n};\r\n\r\nconst s3 = new aws.S3();\r\n\r\nexport async function uploadVideosS3(fileName) {\r\n  // const rawBytes = await randomBytes(16);\r\n  // const imageName = rawBytes.toString('hex');\r\n  // console.log('valor do FileName:', fileName);\r\n  const params = {\r\n    Bucket: bucketName,\r\n    Key: fileName,\r\n  };\r\n  try {\r\n    // const url2 = await presigner.presign(new HttpRequest(s3ObjectUrl));\r\n    // console.log('PRESIGNED URL: ', formatUrl(url2));\r\n    // const uploadURL = await s3.getObject(params).promise();\r\n    const uploadURL = await s3.getSignedUrlPromise('getObject', params); // s3.getSignedUrlPromise('putObject', params);\r\n    const urls = uploadURL;\r\n    console.log(urls);\r\n    return urls;\r\n    // return valorUrl;\r\n  } catch (e) {\r\n    throw new Error(`Could not retrieve file from S3: ${e.message}`);\r\n  }\r\n}\r\n\r\nexport default uploadVideosS3;\r\n"]},"metadata":{},"sourceType":"module"}