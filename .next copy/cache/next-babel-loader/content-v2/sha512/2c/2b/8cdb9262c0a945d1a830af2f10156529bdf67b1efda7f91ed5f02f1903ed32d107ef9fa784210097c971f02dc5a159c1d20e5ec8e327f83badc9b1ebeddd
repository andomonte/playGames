{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\src\\\\next\\\\sistemas\\\\idpb-app\\\\src\\\\components\\\\relatorios\\\\userTelas\\\\uploadFile.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport Dropzone, { useDropzone } from 'react-dropzone';\nconst baseStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  transition: 'border .3s ease-in-out'\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction DropzoneComponent() {\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]);\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png'\n  });\n  const style = useMemo(() => _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, baseStyle), isDragActive ? activeStyle : {}), isDragAccept ? acceptStyle : {}), isDragReject ? rejectStyle : {}), [isDragActive, isDragReject, isDragAccept]);\n  const thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: file.preview,\n      alt: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, file.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this)); // clean up\n\n  useEffect(() => () => {\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return /*#__PURE__*/_jsxDEV(Dropzone, {\n    children: [() => /*#__PURE__*/_jsxDEV(DropContainer, _objectSpread(_objectSpread({}, getRootProps()), {}, {\n      isDragActive: isDragActive,\n      isDragReject: isDragReject,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", _objectSpread({}, getInputProps()), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), DragMessage(isDragActive, isDragReject)]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      children: thumbs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\nexport default DropzoneComponent;","map":{"version":3,"sources":["E:/src/next/sistemas/idpb-app/src/components/relatorios/userTelas/uploadFile.js"],"names":["React","useCallback","useEffect","useMemo","useState","Dropzone","useDropzone","baseStyle","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","transition","activeStyle","acceptStyle","rejectStyle","DropzoneComponent","files","setFiles","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","accept","style","thumbs","name","forEach","revokeObjectURL","DragMessage"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport Dropzone, { useDropzone } from 'react-dropzone';\r\n\r\nconst baseStyle = {\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  padding: '20px',\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: '#eeeeee',\r\n  borderStyle: 'dashed',\r\n  backgroundColor: '#fafafa',\r\n  color: '#bdbdbd',\r\n  transition: 'border .3s ease-in-out',\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: '#2196f3',\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: '#00e676',\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: '#ff1744',\r\n};\r\n\r\nfunction DropzoneComponent() {\r\n  const [files, setFiles] = useState([]);\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    setFiles(\r\n      acceptedFiles.map((file) =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file),\r\n        }),\r\n      ),\r\n    );\r\n  }, []);\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    onDrop,\r\n    accept: 'image/jpeg, image/png',\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept],\r\n  );\r\n\r\n  const thumbs = files.map((file) => (\r\n    <div key={file.name}>\r\n      <img src={file.preview} alt={file.name} />\r\n    </div>\r\n  ));\r\n\r\n  // clean up\r\n  useEffect(\r\n    () => () => {\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files],\r\n  );\r\n\r\n  return (\r\n    <Dropzone>\r\n      {() => (\r\n        <DropContainer\r\n          {...getRootProps()}\r\n          isDragActive={isDragActive}\r\n          isDragReject={isDragReject}\r\n        >\r\n          <input {...getInputProps()} />\r\n          {DragMessage(isDragActive, isDragReject)}\r\n        </DropContainer>\r\n      )}\r\n      <aside>{thumbs}</aside>\r\n    </Dropzone>\r\n  );\r\n}\r\n\r\nexport default DropzoneComponent;\r\n"]},"metadata":{},"sourceType":"module"}